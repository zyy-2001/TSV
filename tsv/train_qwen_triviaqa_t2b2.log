Map:   0%|          | 0/17944 [00:00<?, ? examples/s]Map:   1%|          | 120/17944 [00:00<00:15, 1179.13 examples/s]Map:   1%|▏         | 249/17944 [00:00<00:14, 1238.36 examples/s]Map:   2%|▏         | 376/17944 [00:00<00:14, 1250.50 examples/s]Map:   3%|▎         | 505/17944 [00:00<00:13, 1262.23 examples/s]Map:   4%|▎         | 634/17944 [00:00<00:13, 1266.52 examples/s]Map:   4%|▍         | 764/17944 [00:00<00:13, 1273.93 examples/s]Map:   5%|▍         | 894/17944 [00:00<00:13, 1277.92 examples/s]Map:   6%|▌         | 1084/17944 [00:00<00:13, 1270.21 examples/s]Map:   7%|▋         | 1214/17944 [00:00<00:13, 1276.27 examples/s]Map:   7%|▋         | 1344/17944 [00:01<00:12, 1278.78 examples/s]Map:   8%|▊         | 1474/17944 [00:01<00:12, 1282.64 examples/s]Map:   9%|▉         | 1667/17944 [00:01<00:12, 1282.30 examples/s]Map:  10%|█         | 1796/17944 [00:01<00:12, 1280.99 examples/s]Map:  11%|█         | 1926/17944 [00:01<00:12, 1283.76 examples/s]Map:  11%|█▏        | 2056/17944 [00:01<00:12, 1285.55 examples/s]Map:  12%|█▏        | 2186/17944 [00:01<00:12, 1286.98 examples/s]Map:  13%|█▎        | 2316/17944 [00:01<00:12, 1287.20 examples/s]Map:  14%|█▍        | 2508/17944 [00:01<00:12, 1280.63 examples/s]Map:  15%|█▍        | 2638/17944 [00:02<00:11, 1283.08 examples/s]Map:  16%|█▌        | 2827/17944 [00:02<00:11, 1269.61 examples/s]Map:  16%|█▋        | 2956/17944 [00:02<00:11, 1273.30 examples/s]Map:  17%|█▋        | 3085/17944 [00:02<00:11, 1275.51 examples/s]Map:  18%|█▊        | 3277/17944 [00:02<00:11, 1273.74 examples/s]Map:  19%|█▉        | 3408/17944 [00:02<00:11, 1279.51 examples/s]Map:  20%|█▉        | 3537/17944 [00:02<00:11, 1278.58 examples/s]Map:  21%|██        | 3730/17944 [00:02<00:11, 1279.53 examples/s]Map:  22%|██▏       | 3860/17944 [00:03<00:10, 1281.07 examples/s]Map:  22%|██▏       | 3991/17944 [00:03<00:10, 1283.76 examples/s]Map:  23%|██▎       | 4121/17944 [00:03<00:10, 1287.24 examples/s]Map:  24%|██▎       | 4250/17944 [00:03<00:10, 1285.69 examples/s]Map:  24%|██▍       | 4379/17944 [00:03<00:10, 1284.13 examples/s]Map:  25%|██▌       | 4509/17944 [00:03<00:10, 1286.22 examples/s]Map:  26%|██▌       | 4639/17944 [00:03<00:10, 1288.30 examples/s]Map:  27%|██▋       | 4768/17944 [00:03<00:10, 1285.07 examples/s]Map:  28%|██▊       | 4960/17944 [00:03<00:10, 1279.80 examples/s]Map:  28%|██▊       | 5089/17944 [00:03<00:10, 1277.94 examples/s]Map:  29%|██▉       | 5220/17944 [00:04<00:09, 1284.03 examples/s]Map:  30%|██▉       | 5349/17944 [00:04<00:09, 1283.74 examples/s]Map:  31%|███       | 5478/17944 [00:04<00:09, 1284.27 examples/s]Map:  31%|███▏      | 5609/17944 [00:04<00:09, 1287.22 examples/s]Map:  32%|███▏      | 5740/17944 [00:04<00:09, 1288.64 examples/s]Map:  33%|███▎      | 5918/17944 [00:04<00:09, 1244.72 examples/s]Map:  34%|███▎      | 6048/17944 [00:04<00:09, 1257.69 examples/s]Map:  34%|███▍      | 6175/17944 [00:04<00:09, 1259.23 examples/s]Map:  35%|███▌      | 6303/17944 [00:04<00:09, 1264.50 examples/s]Map:  36%|███▌      | 6432/17944 [00:05<00:09, 1269.65 examples/s]Map:  37%|███▋      | 6561/17944 [00:05<00:08, 1272.64 examples/s]Map:  37%|███▋      | 6691/17944 [00:05<00:08, 1279.44 examples/s]Map:  38%|███▊      | 6822/17944 [00:05<00:08, 1284.15 examples/s]Map:  39%|███▊      | 6952/17944 [00:05<00:08, 1287.01 examples/s]Map:  39%|███▉      | 7082/17944 [00:05<00:08, 1289.28 examples/s]Map:  41%|████      | 7274/17944 [00:05<00:08, 1283.41 examples/s]Map:  41%|████▏     | 7403/17944 [00:05<00:08, 1282.31 examples/s]Map:  42%|████▏     | 7533/17944 [00:05<00:08, 1286.21 examples/s]Map:  43%|████▎     | 7727/17944 [00:06<00:07, 1284.56 examples/s]Map:  44%|████▍     | 7859/17944 [00:06<00:07, 1290.04 examples/s]Map:  45%|████▍     | 7991/17944 [00:06<00:07, 1295.15 examples/s]Map:  45%|████▌     | 8122/17944 [00:06<00:07, 1296.37 examples/s]Map:  46%|████▌     | 8254/17944 [00:06<00:07, 1298.43 examples/s]Map:  47%|████▋     | 8448/17944 [00:06<00:07, 1291.68 examples/s]Map:  48%|████▊     | 8643/17944 [00:06<00:07, 1290.06 examples/s]Map:  49%|████▉     | 8773/17944 [00:06<00:07, 1291.69 examples/s]Map:  50%|████▉     | 8965/17944 [00:07<00:06, 1286.21 examples/s]Map:  51%|█████     | 9095/17944 [00:07<00:06, 1286.33 examples/s]Map:  51%|█████▏    | 9225/17944 [00:07<00:06, 1288.20 examples/s]Map:  52%|█████▏    | 9355/17944 [00:07<00:06, 1291.04 examples/s]Map:  53%|█████▎    | 9486/17944 [00:07<00:06, 1292.52 examples/s]Map:  54%|█████▎    | 9617/17944 [00:07<00:06, 1294.01 examples/s]Map:  55%|█████▍    | 9805/17944 [00:07<00:06, 1274.97 examples/s]Map:  59%|█████▊    | 10539/17944 [00:07<00:02, 2540.70 examples/s]Map:  70%|██████▉   | 12510/17944 [00:07<00:00, 6832.45 examples/s]Map:  81%|████████  | 14480/17944 [00:08<00:00, 10217.02 examples/s]Map:  92%|█████████▏| 16453/17944 [00:08<00:00, 12814.82 examples/s]Map: 100%|██████████| 17944/17944 [00:08<00:00, 2142.20 examples/s] 
Loading checkpoint shards:   0%|          | 0/4 [00:00<?, ?it/s]Loading checkpoint shards:  25%|██▌       | 1/4 [00:01<00:03,  1.30s/it]Loading checkpoint shards:  50%|█████     | 2/4 [00:02<00:02,  1.35s/it]Loading checkpoint shards:  75%|███████▌  | 3/4 [00:03<00:01,  1.29s/it]Loading checkpoint shards: 100%|██████████| 4/4 [00:04<00:00,  1.22s/it]Loading checkpoint shards: 100%|██████████| 4/4 [00:04<00:00,  1.25s/it]
  0%|          | 0/9960 [00:00<?, ?it/s]  2%|▏         | 159/9960 [00:00<00:06, 1584.57it/s]  3%|▎         | 330/9960 [00:00<00:05, 1654.61it/s]  5%|▌         | 504/9960 [00:00<00:05, 1689.44it/s]  7%|▋         | 677/9960 [00:00<00:05, 1702.18it/s]  9%|▊         | 850/9960 [00:00<00:05, 1710.44it/s] 10%|█         | 1022/9960 [00:00<00:05, 1713.11it/s] 12%|█▏        | 1196/9960 [00:00<00:05, 1718.94it/s] 14%|█▍        | 1372/9960 [00:00<00:04, 1730.28it/s] 16%|█▌        | 1546/9960 [00:00<00:04, 1722.87it/s] 17%|█▋        | 1720/9960 [00:01<00:04, 1727.99it/s] 19%|█▉        | 1896/9960 [00:01<00:04, 1737.68it/s] 21%|██        | 2074/9960 [00:01<00:04, 1749.89it/s] 23%|██▎       | 2251/9960 [00:01<00:04, 1755.60it/s] 24%|██▍       | 2427/9960 [00:01<00:04, 1746.18it/s] 26%|██▌       | 2602/9960 [00:01<00:04, 1736.17it/s] 28%|██▊       | 2776/9960 [00:01<00:04, 1694.90it/s] 30%|██▉       | 2948/9960 [00:01<00:04, 1698.69it/s] 31%|███▏      | 3119/9960 [00:01<00:04, 1687.48it/s] 33%|███▎      | 3291/9960 [00:01<00:03, 1695.58it/s] 35%|███▍      | 3467/9960 [00:02<00:03, 1712.04it/s] 37%|███▋      | 3639/9960 [00:02<00:03, 1674.35it/s] 38%|███▊      | 3807/9960 [00:02<00:03, 1670.51it/s] 40%|███▉      | 3975/9960 [00:02<00:03, 1655.54it/s] 42%|████▏     | 4141/9960 [00:02<00:03, 1650.83it/s] 43%|████▎     | 4307/9960 [00:02<00:03, 1652.41it/s] 45%|████▍     | 4474/9960 [00:02<00:03, 1654.40it/s] 47%|████▋     | 4640/9960 [00:02<00:03, 1656.00it/s] 48%|████▊     | 4815/9960 [00:02<00:03, 1682.63it/s] 50%|█████     | 4995/9960 [00:02<00:02, 1714.94it/s] 52%|█████▏    | 5173/9960 [00:03<00:02, 1733.05it/s] 54%|█████▎    | 5350/9960 [00:03<00:02, 1741.43it/s] 56%|█████▌    | 5528/9960 [00:03<00:02, 1750.30it/s] 57%|█████▋    | 5706/9960 [00:03<00:02, 1756.92it/s] 59%|█████▉    | 5882/9960 [00:03<00:02, 1638.26it/s] 61%|██████    | 6057/9960 [00:03<00:02, 1668.73it/s] 63%|██████▎   | 6226/9960 [00:03<00:02, 1658.76it/s] 64%|██████▍   | 6401/9960 [00:03<00:02, 1682.31it/s] 66%|██████▌   | 6574/9960 [00:03<00:01, 1695.09it/s] 68%|██████▊   | 6748/9960 [00:03<00:01, 1708.25it/s] 70%|██████▉   | 6924/9960 [00:04<00:01, 1722.51it/s] 71%|███████▏  | 7099/9960 [00:04<00:01, 1729.53it/s] 73%|███████▎  | 7274/9960 [00:04<00:01, 1732.62it/s] 75%|███████▍  | 7448/9960 [00:04<00:01, 1725.35it/s] 77%|███████▋  | 7621/9960 [00:04<00:01, 1692.15it/s] 78%|███████▊  | 7795/9960 [00:04<00:01, 1704.12it/s] 80%|███████▉  | 7967/9960 [00:04<00:01, 1707.98it/s] 82%|████████▏ | 8142/9960 [00:04<00:01, 1719.00it/s] 83%|████████▎ | 8316/9960 [00:04<00:00, 1724.29it/s] 85%|████████▌ | 8490/9960 [00:04<00:00, 1727.88it/s] 87%|████████▋ | 8664/9960 [00:05<00:00, 1730.29it/s] 89%|████████▊ | 8838/9960 [00:05<00:00, 1703.16it/s] 91%|█████████ | 9016/9960 [00:05<00:00, 1723.51it/s] 92%|█████████▏| 9192/9960 [00:05<00:00, 1733.70it/s] 94%|█████████▍| 9370/9960 [00:05<00:00, 1744.78it/s] 96%|█████████▌| 9549/9960 [00:05<00:00, 1758.19it/s] 98%|█████████▊| 9725/9960 [00:05<00:00, 1724.60it/s] 99%|█████████▉| 9898/9960 [00:05<00:00, 1711.99it/s]100%|██████████| 9960/9960 [00:05<00:00, 1707.56it/s]
Epoch 1/20 Batches:   0%|          | 0/1 [00:00<?, ?it/s]We detected that you are passing `past_key_values` as a tuple and this is deprecated and will be removed in v4.43. Please use an appropriate `Cache` class (https://huggingface.co/docs/transformers/v4.41.3/en/internal/generation_utils#transformers.Cache)
Epoch 1/20 Batches: 100%|██████████| 1/1 [00:01<00:00,  1.53s/it]                                                                 epoch_loss: 0.713432788848877
Epoch [1/20], Loss: 0.7134
Best test AUROC: 0.5278, at epoch: 0
Epoch [1/20],Test AUROC: 0.5278
Epoch 2/20 Batches:   0%|          | 0/1 [00:00<?, ?it/s]Epoch 2/20 Batches: 100%|██████████| 1/1 [00:00<00:00,  1.07it/s]                                                                 epoch_loss: 0.6888662576675415
Epoch [2/20], Loss: 0.6889
Best test AUROC: 0.6109, at epoch: 1
Epoch [2/20],Test AUROC: 0.6109
Epoch 3/20 Batches:   0%|          | 0/1 [00:00<?, ?it/s]Epoch 3/20 Batches: 100%|██████████| 1/1 [00:00<00:00,  1.06it/s]                                                                 epoch_loss: 0.6711506247520447
Epoch [3/20], Loss: 0.6712
Best test AUROC: 0.6612, at epoch: 2
Epoch [3/20],Test AUROC: 0.6612
Epoch 4/20 Batches:   0%|          | 0/1 [00:00<?, ?it/s]Epoch 4/20 Batches: 100%|██████████| 1/1 [00:00<00:00,  1.06it/s]                                                                 epoch_loss: 0.6568911075592041
Epoch [4/20], Loss: 0.6569
Best test AUROC: 0.6923, at epoch: 3
Epoch [4/20],Test AUROC: 0.6923
Epoch 5/20 Batches:   0%|          | 0/1 [00:00<?, ?it/s]Epoch 5/20 Batches: 100%|██████████| 1/1 [00:00<00:00,  1.06it/s]                                                                 epoch_loss: 0.6429754495620728
Epoch [5/20], Loss: 0.6430
Best test AUROC: 0.7120, at epoch: 4
Epoch [5/20],Test AUROC: 0.7120
Epoch 6/20 Batches:   0%|          | 0/1 [00:00<?, ?it/s]Epoch 6/20 Batches: 100%|██████████| 1/1 [00:00<00:00,  1.06it/s]                                                                 epoch_loss: 0.628821074962616
Epoch [6/20], Loss: 0.6288
Best test AUROC: 0.7266, at epoch: 5
Epoch [6/20],Test AUROC: 0.7266
Epoch 7/20 Batches:   0%|          | 0/1 [00:00<?, ?it/s]Epoch 7/20 Batches: 100%|██████████| 1/1 [00:00<00:00,  1.05it/s]                                                                 epoch_loss: 0.6146243810653687
Epoch [7/20], Loss: 0.6146
Best test AUROC: 0.7386, at epoch: 6
Epoch [7/20],Test AUROC: 0.7386
Epoch 8/20 Batches:   0%|          | 0/1 [00:00<?, ?it/s]Epoch 8/20 Batches: 100%|██████████| 1/1 [00:00<00:00,  1.06it/s]                                                                 epoch_loss: 0.6006674766540527
Epoch [8/20], Loss: 0.6007
Best test AUROC: 0.7493, at epoch: 7
Epoch [8/20],Test AUROC: 0.7493
Epoch 9/20 Batches:   0%|          | 0/1 [00:00<?, ?it/s]Epoch 9/20 Batches: 100%|██████████| 1/1 [00:00<00:00,  1.06it/s]                                                                 epoch_loss: 0.5852108597755432
Epoch [9/20], Loss: 0.5852
Best test AUROC: 0.7585, at epoch: 8
Epoch [9/20],Test AUROC: 0.7585
Epoch 10/20 Batches:   0%|          | 0/1 [00:00<?, ?it/s]Epoch 10/20 Batches: 100%|██████████| 1/1 [00:00<00:00,  1.05it/s]                                                                  epoch_loss: 0.5689734816551208
Epoch [10/20], Loss: 0.5690
Best test AUROC: 0.7665, at epoch: 9
Epoch [10/20],Test AUROC: 0.7665
Epoch 11/20 Batches:   0%|          | 0/1 [00:00<?, ?it/s]Epoch 11/20 Batches: 100%|██████████| 1/1 [00:00<00:00,  1.05it/s]                                                                  epoch_loss: 0.5530749559402466
Epoch [11/20], Loss: 0.5531
Best test AUROC: 0.7722, at epoch: 10
Epoch [11/20],Test AUROC: 0.7722
Epoch 12/20 Batches:   0%|          | 0/1 [00:00<?, ?it/s]Epoch 12/20 Batches: 100%|██████████| 1/1 [00:00<00:00,  1.05it/s]                                                                  epoch_loss: 0.5370806455612183
Epoch [12/20], Loss: 0.5371
Best test AUROC: 0.7764, at epoch: 11
Epoch [12/20],Test AUROC: 0.7764
Epoch 13/20 Batches:   0%|          | 0/1 [00:00<?, ?it/s]Epoch 13/20 Batches: 100%|██████████| 1/1 [00:00<00:00,  1.06it/s]                                                                  epoch_loss: 0.5205686092376709
Epoch [13/20], Loss: 0.5206
Best test AUROC: 0.7799, at epoch: 12
Epoch [13/20],Test AUROC: 0.7799
Epoch 14/20 Batches:   0%|          | 0/1 [00:00<?, ?it/s]Epoch 14/20 Batches: 100%|██████████| 1/1 [00:00<00:00,  1.06it/s]                                                                  epoch_loss: 0.5023475885391235
Epoch [14/20], Loss: 0.5023
Best test AUROC: 0.7822, at epoch: 13
Epoch [14/20],Test AUROC: 0.7822
Epoch 15/20 Batches:   0%|          | 0/1 [00:00<?, ?it/s]Epoch 15/20 Batches: 100%|██████████| 1/1 [00:00<00:00,  1.05it/s]                                                                  epoch_loss: 0.48321405053138733
Epoch [15/20], Loss: 0.4832
Best test AUROC: 0.7843, at epoch: 14
Epoch [15/20],Test AUROC: 0.7843
Epoch 16/20 Batches:   0%|          | 0/1 [00:00<?, ?it/s]Epoch 16/20 Batches: 100%|██████████| 1/1 [00:00<00:00,  1.06it/s]                                                                  epoch_loss: 0.4618392884731293
Epoch [16/20], Loss: 0.4618
Best test AUROC: 0.7873, at epoch: 15
Epoch [16/20],Test AUROC: 0.7873
Epoch 17/20 Batches:   0%|          | 0/1 [00:00<?, ?it/s]Epoch 17/20 Batches: 100%|██████████| 1/1 [00:00<00:00,  1.06it/s]                                                                  epoch_loss: 0.4391295909881592
Epoch [17/20], Loss: 0.4391
Best test AUROC: 0.7899, at epoch: 16
Epoch [17/20],Test AUROC: 0.7899
Epoch 18/20 Batches:   0%|          | 0/1 [00:00<?, ?it/s]Epoch 18/20 Batches: 100%|██████████| 1/1 [00:00<00:00,  1.06it/s]                                                                  epoch_loss: 0.4167211055755615
Epoch [18/20], Loss: 0.4167
Best test AUROC: 0.7918, at epoch: 17
Epoch [18/20],Test AUROC: 0.7918
Epoch 19/20 Batches:   0%|          | 0/1 [00:00<?, ?it/s]Epoch 19/20 Batches: 100%|██████████| 1/1 [00:00<00:00,  1.06it/s]                                                                  epoch_loss: 0.3911842107772827
Epoch [19/20], Loss: 0.3912
Best test AUROC: 0.7934, at epoch: 18
Epoch [19/20],Test AUROC: 0.7934
Epoch 20/20 Batches:   0%|          | 0/1 [00:00<?, ?it/s]Epoch 20/20 Batches: 100%|██████████| 1/1 [00:00<00:00,  1.06it/s]                                                                  epoch_loss: 0.36482781171798706
Epoch [20/20], Loss: 0.3648
Best test AUROC: 0.7955, at epoch: 19
Epoch [20/20],Test AUROC: 0.7955
  0%|          | 0/115 [00:00<?, ?it/s]  1%|          | 1/115 [00:00<00:55,  2.06it/s]  2%|▏         | 2/115 [00:01<00:58,  1.94it/s]  3%|▎         | 3/115 [00:01<00:48,  2.30it/s]  3%|▎         | 4/115 [00:01<00:52,  2.11it/s]  4%|▍         | 5/115 [00:02<00:53,  2.06it/s]  5%|▌         | 6/115 [00:02<00:50,  2.18it/s]  6%|▌         | 7/115 [00:03<00:46,  2.34it/s]  7%|▋         | 8/115 [00:03<00:45,  2.34it/s]  8%|▊         | 9/115 [00:04<00:47,  2.22it/s]  9%|▊         | 10/115 [00:04<00:50,  2.10it/s] 10%|▉         | 11/115 [00:04<00:44,  2.31it/s] 10%|█         | 12/115 [00:05<00:48,  2.11it/s] 11%|█▏        | 13/115 [00:06<00:49,  2.08it/s] 12%|█▏        | 14/115 [00:06<00:49,  2.04it/s] 13%|█▎        | 15/115 [00:06<00:44,  2.24it/s] 14%|█▍        | 16/115 [00:07<00:48,  2.04it/s] 15%|█▍        | 17/115 [00:08<00:50,  1.95it/s] 16%|█▌        | 18/115 [00:08<00:51,  1.87it/s] 17%|█▋        | 19/115 [00:08<00:45,  2.10it/s] 17%|█▋        | 20/115 [00:09<00:43,  2.17it/s] 18%|█▊        | 21/115 [00:09<00:45,  2.07it/s] 19%|█▉        | 22/115 [00:10<00:45,  2.05it/s] 20%|██        | 23/115 [00:10<00:40,  2.26it/s] 21%|██        | 24/115 [00:11<00:39,  2.31it/s] 22%|██▏       | 25/115 [00:11<00:36,  2.48it/s] 23%|██▎       | 26/115 [00:11<00:34,  2.62it/s] 23%|██▎       | 27/115 [00:12<00:37,  2.33it/s] 24%|██▍       | 28/115 [00:12<00:40,  2.15it/s] 25%|██▌       | 29/115 [00:13<00:44,  1.92it/s] 26%|██▌       | 30/115 [00:14<00:44,  1.90it/s] 27%|██▋       | 31/115 [00:14<00:40,  2.06it/s] 28%|██▊       | 32/115 [00:15<00:40,  2.05it/s] 29%|██▊       | 33/115 [00:15<00:42,  1.92it/s] 30%|██▉       | 34/115 [00:16<00:40,  1.98it/s] 30%|███       | 35/115 [00:16<00:39,  2.04it/s] 31%|███▏      | 36/115 [00:17<00:40,  1.97it/s] 32%|███▏      | 37/115 [00:17<00:40,  1.91it/s] 33%|███▎      | 38/115 [00:18<00:39,  1.95it/s] 34%|███▍      | 39/115 [00:18<00:36,  2.09it/s] 35%|███▍      | 40/115 [00:18<00:34,  2.16it/s] 36%|███▌      | 41/115 [00:19<00:37,  1.96it/s] 37%|███▋      | 42/115 [00:20<00:36,  1.98it/s] 37%|███▋      | 43/115 [00:20<00:42,  1.71it/s] 38%|███▊      | 44/115 [00:21<00:46,  1.52it/s] 39%|███▉      | 45/115 [00:22<00:44,  1.59it/s] 40%|████      | 46/115 [00:22<00:42,  1.61it/s] 41%|████      | 47/115 [00:23<00:39,  1.71it/s] 42%|████▏     | 48/115 [00:24<00:52,  1.28it/s] 43%|████▎     | 49/115 [00:25<00:49,  1.35it/s] 43%|████▎     | 50/115 [00:25<00:44,  1.45it/s] 44%|████▍     | 51/115 [00:26<00:40,  1.57it/s] 45%|████▌     | 52/115 [00:26<00:40,  1.55it/s] 46%|████▌     | 53/115 [00:27<00:39,  1.57it/s] 47%|████▋     | 54/115 [00:28<00:37,  1.63it/s] 48%|████▊     | 55/115 [00:28<00:31,  1.90it/s] 49%|████▊     | 56/115 [00:28<00:29,  2.01it/s] 50%|████▉     | 57/115 [00:29<00:25,  2.29it/s] 50%|█████     | 58/115 [00:29<00:23,  2.42it/s] 51%|█████▏    | 59/115 [00:29<00:21,  2.63it/s] 52%|█████▏    | 60/115 [00:30<00:23,  2.35it/s] 53%|█████▎    | 61/115 [00:30<00:23,  2.30it/s] 54%|█████▍    | 62/115 [00:31<00:24,  2.15it/s] 55%|█████▍    | 63/115 [00:32<00:26,  1.95it/s] 56%|█████▌    | 64/115 [00:32<00:25,  2.00it/s] 57%|█████▋    | 65/115 [00:32<00:24,  2.07it/s] 57%|█████▋    | 66/115 [00:33<00:24,  1.99it/s] 58%|█████▊    | 67/115 [00:33<00:22,  2.16it/s] 59%|█████▉    | 68/115 [00:34<00:20,  2.26it/s] 60%|██████    | 69/115 [00:34<00:21,  2.18it/s] 61%|██████    | 70/115 [00:35<00:21,  2.11it/s] 62%|██████▏   | 71/115 [00:35<00:20,  2.13it/s] 63%|██████▎   | 72/115 [00:36<00:20,  2.09it/s] 63%|██████▎   | 73/115 [00:36<00:18,  2.25it/s] 64%|██████▍   | 74/115 [00:36<00:17,  2.34it/s] 65%|██████▌   | 75/115 [00:37<00:17,  2.30it/s] 66%|██████▌   | 76/115 [00:37<00:18,  2.13it/s] 67%|██████▋   | 77/115 [00:38<00:18,  2.04it/s] 68%|██████▊   | 78/115 [00:38<00:16,  2.18it/s] 69%|██████▊   | 79/115 [00:39<00:17,  2.08it/s] 70%|██████▉   | 80/115 [00:39<00:15,  2.24it/s] 70%|███████   | 81/115 [00:40<00:14,  2.29it/s] 71%|███████▏  | 82/115 [00:40<00:14,  2.30it/s] 72%|███████▏  | 83/115 [00:41<00:13,  2.38it/s] 73%|███████▎  | 84/115 [00:41<00:13,  2.23it/s] 74%|███████▍  | 85/115 [00:41<00:13,  2.19it/s] 75%|███████▍  | 86/115 [00:42<00:14,  2.07it/s] 76%|███████▌  | 87/115 [00:43<00:15,  1.84it/s] 77%|███████▋  | 88/115 [00:43<00:14,  1.89it/s] 77%|███████▋  | 89/115 [00:44<00:11,  2.17it/s] 78%|███████▊  | 90/115 [00:44<00:11,  2.19it/s] 79%|███████▉  | 91/115 [00:45<00:12,  1.89it/s] 80%|████████  | 92/115 [00:45<00:12,  1.78it/s] 81%|████████  | 93/115 [00:46<00:12,  1.79it/s] 82%|████████▏ | 94/115 [00:46<00:11,  1.89it/s] 83%|████████▎ | 95/115 [00:47<00:10,  1.95it/s] 83%|████████▎ | 96/115 [00:47<00:10,  1.82it/s] 84%|████████▍ | 97/115 [00:48<00:09,  1.88it/s] 85%|████████▌ | 98/115 [00:48<00:08,  2.05it/s] 86%|████████▌ | 99/115 [00:49<00:07,  2.13it/s] 87%|████████▋ | 100/115 [00:49<00:06,  2.29it/s] 88%|████████▊ | 101/115 [00:50<00:06,  2.20it/s] 89%|████████▊ | 102/115 [00:50<00:06,  2.14it/s] 90%|████████▉ | 103/115 [00:50<00:05,  2.35it/s] 90%|█████████ | 104/115 [00:51<00:04,  2.26it/s] 91%|█████████▏| 105/115 [00:51<00:03,  2.57it/s] 92%|█████████▏| 106/115 [00:52<00:03,  2.38it/s] 93%|█████████▎| 107/115 [00:52<00:03,  2.44it/s] 94%|█████████▍| 108/115 [00:52<00:02,  2.63it/s] 95%|█████████▍| 109/115 [00:53<00:02,  2.76it/s] 96%|█████████▌| 110/115 [00:54<00:02,  1.87it/s] 97%|█████████▋| 111/115 [00:54<00:02,  1.65it/s] 97%|█████████▋| 112/115 [00:56<00:02,  1.06it/s] 98%|█████████▊| 113/115 [00:57<00:01,  1.27it/s] 99%|█████████▉| 114/115 [00:57<00:00,  1.46it/s]100%|██████████| 115/115 [00:57<00:00,  2.00it/s]
tsv_main1.py:175: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  exemplar_label = torch.tensor(exemplar_labels).cuda()
tsv_main1.py:182: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  augmented_labels = torch.concat((selected_labels, torch.tensor(exemplar_labels).clone().cuda()))
Epoch 1/20 Batches:   0%|          | 0/3 [00:00<?, ?it/s]/data/zyy/LLM/tsv/train_utils.py:26: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  labels = torch.tensor(labels, dtype=torch.long, device=device)
Epoch 1/20 Batches:  33%|███▎      | 1/3 [00:01<00:02,  1.14s/it]Epoch 1/20 Batches:  67%|██████▋   | 2/3 [00:01<00:00,  1.34it/s]Epoch 1/20 Batches: 100%|██████████| 3/3 [00:02<00:00,  1.19it/s]                                                                 epoch_loss: 0.3846050600210826
Epoch [1/20], Loss: 0.3846
Best test AUROC: 0.8032, at epoch: 20
Epoch 2/20 Batches:   0%|          | 0/3 [00:00<?, ?it/s]/data/zyy/LLM/tsv/train_utils.py:26: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  labels = torch.tensor(labels, dtype=torch.long, device=device)
Epoch 2/20 Batches:  33%|███▎      | 1/3 [00:01<00:02,  1.15s/it]Epoch 2/20 Batches:  67%|██████▋   | 2/3 [00:01<00:00,  1.34it/s]Epoch 2/20 Batches: 100%|██████████| 3/3 [00:02<00:00,  1.19it/s]                                                                 epoch_loss: 0.26281560957431793
Epoch [2/20], Loss: 0.2628
Best test AUROC: 0.8066, at epoch: 21
Epoch 3/20 Batches:   0%|          | 0/3 [00:00<?, ?it/s]/data/zyy/LLM/tsv/train_utils.py:26: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  labels = torch.tensor(labels, dtype=torch.long, device=device)
Epoch 3/20 Batches:  33%|███▎      | 1/3 [00:01<00:02,  1.15s/it]Epoch 3/20 Batches:  67%|██████▋   | 2/3 [00:01<00:00,  1.33it/s]Epoch 3/20 Batches: 100%|██████████| 3/3 [00:02<00:00,  1.19it/s]                                                                 epoch_loss: 0.2152857780456543
Epoch [3/20], Loss: 0.2153
Best test AUROC: 0.8072, at epoch: 22
Epoch 4/20 Batches:   0%|          | 0/3 [00:00<?, ?it/s]/data/zyy/LLM/tsv/train_utils.py:26: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  labels = torch.tensor(labels, dtype=torch.long, device=device)
Epoch 4/20 Batches:  33%|███▎      | 1/3 [00:01<00:02,  1.15s/it]Epoch 4/20 Batches:  67%|██████▋   | 2/3 [00:01<00:00,  1.33it/s]Epoch 4/20 Batches: 100%|██████████| 3/3 [00:02<00:00,  1.19it/s]                                                                 epoch_loss: 0.1984590763847033
Epoch [4/20], Loss: 0.1985
Best test AUROC: 0.8079, at epoch: 23
Epoch 5/20 Batches:   0%|          | 0/3 [00:00<?, ?it/s]/data/zyy/LLM/tsv/train_utils.py:26: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  labels = torch.tensor(labels, dtype=torch.long, device=device)
Epoch 5/20 Batches:  33%|███▎      | 1/3 [00:01<00:02,  1.15s/it]Epoch 5/20 Batches:  67%|██████▋   | 2/3 [00:01<00:00,  1.33it/s]Epoch 5/20 Batches: 100%|██████████| 3/3 [00:02<00:00,  1.19it/s]                                                                 epoch_loss: 0.1670545240243276
Epoch [5/20], Loss: 0.1671
Epoch 6/20 Batches:   0%|          | 0/3 [00:00<?, ?it/s]/data/zyy/LLM/tsv/train_utils.py:26: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  labels = torch.tensor(labels, dtype=torch.long, device=device)
Epoch 6/20 Batches:  33%|███▎      | 1/3 [00:01<00:02,  1.15s/it]Epoch 6/20 Batches:  67%|██████▋   | 2/3 [00:01<00:00,  1.33it/s]Epoch 6/20 Batches: 100%|██████████| 3/3 [00:02<00:00,  1.19it/s]                                                                 epoch_loss: 0.1354611044128736
Epoch [6/20], Loss: 0.1355
Epoch 7/20 Batches:   0%|          | 0/3 [00:00<?, ?it/s]/data/zyy/LLM/tsv/train_utils.py:26: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  labels = torch.tensor(labels, dtype=torch.long, device=device)
Epoch 7/20 Batches:  33%|███▎      | 1/3 [00:01<00:02,  1.15s/it]Epoch 7/20 Batches:  67%|██████▋   | 2/3 [00:01<00:00,  1.33it/s]Epoch 7/20 Batches: 100%|██████████| 3/3 [00:02<00:00,  1.19it/s]                                                                 epoch_loss: 0.10662570595741272
Epoch [7/20], Loss: 0.1066
Epoch 8/20 Batches:   0%|          | 0/3 [00:00<?, ?it/s]/data/zyy/LLM/tsv/train_utils.py:26: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  labels = torch.tensor(labels, dtype=torch.long, device=device)
Epoch 8/20 Batches:  33%|███▎      | 1/3 [00:01<00:02,  1.15s/it]Epoch 8/20 Batches:  67%|██████▋   | 2/3 [00:01<00:00,  1.34it/s]Epoch 8/20 Batches: 100%|██████████| 3/3 [00:02<00:00,  1.19it/s]                                                                 epoch_loss: 0.0871201902627945
Epoch [8/20], Loss: 0.0871
Epoch 9/20 Batches:   0%|          | 0/3 [00:00<?, ?it/s]/data/zyy/LLM/tsv/train_utils.py:26: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  labels = torch.tensor(labels, dtype=torch.long, device=device)
Epoch 9/20 Batches:  33%|███▎      | 1/3 [00:01<00:02,  1.14s/it]Epoch 9/20 Batches:  67%|██████▋   | 2/3 [00:01<00:00,  1.34it/s]Epoch 9/20 Batches: 100%|██████████| 3/3 [00:02<00:00,  1.19it/s]                                                                 epoch_loss: 0.07188430180152257
Epoch [9/20], Loss: 0.0719
Epoch 10/20 Batches:   0%|          | 0/3 [00:00<?, ?it/s]/data/zyy/LLM/tsv/train_utils.py:26: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  labels = torch.tensor(labels, dtype=torch.long, device=device)
Epoch 10/20 Batches:  33%|███▎      | 1/3 [00:01<00:02,  1.14s/it]Epoch 10/20 Batches:  67%|██████▋   | 2/3 [00:01<00:00,  1.34it/s]Epoch 10/20 Batches: 100%|██████████| 3/3 [00:02<00:00,  1.20it/s]                                                                  epoch_loss: 0.057475507259368896
Epoch [10/20], Loss: 0.0575
Epoch 11/20 Batches:   0%|          | 0/3 [00:00<?, ?it/s]/data/zyy/LLM/tsv/train_utils.py:26: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  labels = torch.tensor(labels, dtype=torch.long, device=device)
Epoch 11/20 Batches:  33%|███▎      | 1/3 [00:01<00:02,  1.15s/it]Epoch 11/20 Batches:  67%|██████▋   | 2/3 [00:01<00:00,  1.33it/s]Epoch 11/20 Batches: 100%|██████████| 3/3 [00:02<00:00,  1.19it/s]                                                                  epoch_loss: 0.04606515976289908
Epoch [11/20], Loss: 0.0461
Epoch 12/20 Batches:   0%|          | 0/3 [00:00<?, ?it/s]/data/zyy/LLM/tsv/train_utils.py:26: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  labels = torch.tensor(labels, dtype=torch.long, device=device)
Epoch 12/20 Batches:  33%|███▎      | 1/3 [00:01<00:02,  1.14s/it]Epoch 12/20 Batches:  67%|██████▋   | 2/3 [00:01<00:00,  1.34it/s]Epoch 12/20 Batches: 100%|██████████| 3/3 [00:02<00:00,  1.20it/s]                                                                  epoch_loss: 0.037094237903753914
Epoch [12/20], Loss: 0.0371
Epoch 13/20 Batches:   0%|          | 0/3 [00:00<?, ?it/s]/data/zyy/LLM/tsv/train_utils.py:26: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  labels = torch.tensor(labels, dtype=torch.long, device=device)
Epoch 13/20 Batches:  33%|███▎      | 1/3 [00:01<00:02,  1.14s/it]Epoch 13/20 Batches:  67%|██████▋   | 2/3 [00:01<00:00,  1.34it/s]Epoch 13/20 Batches: 100%|██████████| 3/3 [00:02<00:00,  1.20it/s]                                                                  epoch_loss: 0.03006112016737461
Epoch [13/20], Loss: 0.0301
Epoch 14/20 Batches:   0%|          | 0/3 [00:00<?, ?it/s]/data/zyy/LLM/tsv/train_utils.py:26: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  labels = torch.tensor(labels, dtype=torch.long, device=device)
Epoch 14/20 Batches:  33%|███▎      | 1/3 [00:01<00:02,  1.15s/it]Epoch 14/20 Batches:  67%|██████▋   | 2/3 [00:01<00:00,  1.34it/s]Epoch 14/20 Batches: 100%|██████████| 3/3 [00:02<00:00,  1.19it/s]                                                                  epoch_loss: 0.024284901097416878
Epoch [14/20], Loss: 0.0243
Epoch 15/20 Batches:   0%|          | 0/3 [00:00<?, ?it/s]/data/zyy/LLM/tsv/train_utils.py:26: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  labels = torch.tensor(labels, dtype=torch.long, device=device)
Epoch 15/20 Batches:  33%|███▎      | 1/3 [00:01<00:02,  1.14s/it]Epoch 15/20 Batches:  67%|██████▋   | 2/3 [00:01<00:00,  1.35it/s]Epoch 15/20 Batches: 100%|██████████| 3/3 [00:02<00:00,  1.20it/s]                                                                  epoch_loss: 0.019697173188130062
Epoch [15/20], Loss: 0.0197
Epoch 16/20 Batches:   0%|          | 0/3 [00:00<?, ?it/s]/data/zyy/LLM/tsv/train_utils.py:26: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  labels = torch.tensor(labels, dtype=torch.long, device=device)
Epoch 16/20 Batches:  33%|███▎      | 1/3 [00:01<00:02,  1.14s/it]Epoch 16/20 Batches:  67%|██████▋   | 2/3 [00:01<00:00,  1.35it/s]Epoch 16/20 Batches: 100%|██████████| 3/3 [00:02<00:00,  1.20it/s]                                                                  epoch_loss: 0.016025854119410116
Epoch [16/20], Loss: 0.0160
Epoch 17/20 Batches:   0%|          | 0/3 [00:00<?, ?it/s]/data/zyy/LLM/tsv/train_utils.py:26: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  labels = torch.tensor(labels, dtype=torch.long, device=device)
Epoch 17/20 Batches:  33%|███▎      | 1/3 [00:01<00:02,  1.14s/it]Epoch 17/20 Batches:  67%|██████▋   | 2/3 [00:01<00:00,  1.35it/s]Epoch 17/20 Batches: 100%|██████████| 3/3 [00:02<00:00,  1.20it/s]                                                                  epoch_loss: 0.013097073727597794
Epoch [17/20], Loss: 0.0131
Epoch 18/20 Batches:   0%|          | 0/3 [00:00<?, ?it/s]/data/zyy/LLM/tsv/train_utils.py:26: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  labels = torch.tensor(labels, dtype=torch.long, device=device)
Epoch 18/20 Batches:  33%|███▎      | 1/3 [00:01<00:02,  1.14s/it]Epoch 18/20 Batches:  67%|██████▋   | 2/3 [00:01<00:00,  1.34it/s]Epoch 18/20 Batches: 100%|██████████| 3/3 [00:02<00:00,  1.19it/s]                                                                  epoch_loss: 0.010753476371367773
Epoch [18/20], Loss: 0.0108
Epoch 19/20 Batches:   0%|          | 0/3 [00:00<?, ?it/s]/data/zyy/LLM/tsv/train_utils.py:26: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  labels = torch.tensor(labels, dtype=torch.long, device=device)
Epoch 19/20 Batches:  33%|███▎      | 1/3 [00:01<00:02,  1.14s/it]Epoch 19/20 Batches:  67%|██████▋   | 2/3 [00:01<00:00,  1.34it/s]Epoch 19/20 Batches: 100%|██████████| 3/3 [00:02<00:00,  1.19it/s]                                                                  epoch_loss: 0.008850560213128725
Epoch [19/20], Loss: 0.0089
Epoch 20/20 Batches:   0%|          | 0/3 [00:00<?, ?it/s]/data/zyy/LLM/tsv/train_utils.py:26: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  labels = torch.tensor(labels, dtype=torch.long, device=device)
Epoch 20/20 Batches:  33%|███▎      | 1/3 [00:01<00:02,  1.14s/it]Epoch 20/20 Batches:  67%|██████▋   | 2/3 [00:01<00:00,  1.34it/s]Epoch 20/20 Batches: 100%|██████████| 3/3 [00:02<00:00,  1.19it/s]                                                                  epoch_loss: 0.00733196750904123
Epoch [20/20], Loss: 0.0073
best_test_auroc: 0.8079444097928612
