Map:   0%|          | 0/17944 [00:00<?, ? examples/s]Map:   1%|          | 116/17944 [00:00<00:15, 1139.15 examples/s]Map:   1%|▏         | 248/17944 [00:00<00:14, 1241.45 examples/s]Map:   2%|▏         | 381/17944 [00:00<00:13, 1274.11 examples/s]Map:   3%|▎         | 514/17944 [00:00<00:13, 1292.48 examples/s]Map:   4%|▎         | 647/17944 [00:00<00:13, 1303.59 examples/s]Map:   4%|▍         | 780/17944 [00:00<00:13, 1310.15 examples/s]Map:   5%|▌         | 914/17944 [00:00<00:12, 1315.09 examples/s]Map:   6%|▌         | 1047/17944 [00:00<00:12, 1316.93 examples/s]Map:   7%|▋         | 1181/17944 [00:00<00:12, 1319.65 examples/s]Map:   8%|▊         | 1361/17944 [00:01<00:13, 1269.07 examples/s]Map:   8%|▊         | 1495/17944 [00:01<00:12, 1285.79 examples/s]Map:   9%|▉         | 1629/17944 [00:01<00:12, 1297.59 examples/s]Map:  10%|▉         | 1763/17944 [00:01<00:12, 1305.84 examples/s]Map:  11%|█         | 1897/17944 [00:01<00:12, 1312.10 examples/s]Map:  11%|█▏        | 2031/17944 [00:01<00:12, 1316.14 examples/s]Map:  12%|█▏        | 2165/17944 [00:01<00:11, 1318.84 examples/s]Map:  13%|█▎        | 2299/17944 [00:01<00:11, 1320.77 examples/s]Map:  14%|█▎        | 2433/17944 [00:01<00:11, 1322.10 examples/s]Map:  15%|█▍        | 2618/17944 [00:02<00:11, 1283.87 examples/s]Map:  15%|█▌        | 2752/17944 [00:02<00:11, 1295.88 examples/s]Map:  16%|█▌        | 2886/17944 [00:02<00:11, 1304.77 examples/s]Map:  17%|█▋        | 3019/17944 [00:02<00:11, 1310.42 examples/s]Map:  18%|█▊        | 3153/17944 [00:02<00:11, 1315.66 examples/s]Map:  19%|█▊        | 3350/17944 [00:02<00:11, 1310.19 examples/s]Map:  19%|█▉        | 3484/17944 [00:02<00:11, 1313.84 examples/s]Map:  20%|██        | 3618/17944 [00:02<00:10, 1316.45 examples/s]Map:  21%|██        | 3802/17944 [00:02<00:11, 1277.69 examples/s]Map:  22%|██▏       | 3936/17944 [00:03<00:10, 1290.87 examples/s]Map:  23%|██▎       | 4070/17944 [00:03<00:10, 1299.37 examples/s]Map:  23%|██▎       | 4204/17944 [00:03<00:10, 1306.30 examples/s]Map:  24%|██▍       | 4338/17944 [00:03<00:10, 1312.25 examples/s]Map:  25%|██▍       | 4470/17944 [00:03<00:10, 1310.40 examples/s]Map:  26%|██▌       | 4604/17944 [00:03<00:10, 1314.14 examples/s]Map:  27%|██▋       | 4788/17944 [00:03<00:10, 1276.54 examples/s]Map:  28%|██▊       | 4969/17944 [00:03<00:10, 1247.74 examples/s]Map:  28%|██▊       | 5102/17944 [00:03<00:10, 1265.84 examples/s]Map:  29%|██▉       | 5235/17944 [00:04<00:09, 1281.55 examples/s]Map:  30%|██▉       | 5368/17944 [00:04<00:09, 1292.94 examples/s]Map:  31%|███       | 5501/17944 [00:04<00:09, 1300.26 examples/s]Map:  31%|███▏      | 5635/17944 [00:04<00:09, 1307.89 examples/s]Map:  32%|███▏      | 5769/17944 [00:04<00:09, 1314.33 examples/s]Map:  33%|███▎      | 5903/17944 [00:04<00:09, 1318.95 examples/s]Map:  34%|███▍      | 6090/17944 [00:04<00:09, 1285.10 examples/s]Map:  35%|███▍      | 6224/17944 [00:04<00:09, 1298.11 examples/s]Map:  35%|███▌      | 6355/17944 [00:04<00:08, 1297.84 examples/s]Map:  36%|███▌      | 6488/17944 [00:04<00:08, 1304.62 examples/s]Map:  37%|███▋      | 6622/17944 [00:05<00:08, 1311.24 examples/s]Map:  38%|███▊      | 6756/17944 [00:05<00:08, 1315.78 examples/s]Map:  38%|███▊      | 6890/17944 [00:05<00:08, 1318.95 examples/s]Map:  39%|███▉      | 7024/17944 [00:05<00:08, 1321.71 examples/s]Map:  40%|███▉      | 7158/17944 [00:05<00:08, 1324.63 examples/s]Map:  41%|████      | 7344/17944 [00:05<00:08, 1280.04 examples/s]Map:  42%|████▏     | 7477/17944 [00:05<00:08, 1291.47 examples/s]Map:  42%|████▏     | 7611/17944 [00:05<00:07, 1300.33 examples/s]Map:  43%|████▎     | 7745/17944 [00:05<00:07, 1308.31 examples/s]Map:  44%|████▍     | 7879/17944 [00:06<00:07, 1313.78 examples/s]Map:  45%|████▍     | 8013/17944 [00:06<00:07, 1317.26 examples/s]Map:  45%|████▌     | 8147/17944 [00:06<00:07, 1319.80 examples/s]Map:  46%|████▌     | 8281/17944 [00:06<00:07, 1322.64 examples/s]Map:  47%|████▋     | 8470/17944 [00:06<00:07, 1292.72 examples/s]Map:  48%|████▊     | 8666/17944 [00:06<00:07, 1294.56 examples/s]Map:  49%|████▉     | 8853/17944 [00:06<00:07, 1276.26 examples/s]Map:  50%|█████     | 8987/17944 [00:06<00:06, 1288.71 examples/s]Map:  51%|█████     | 9121/17944 [00:07<00:06, 1298.05 examples/s]Map:  52%|█████▏    | 9255/17944 [00:07<00:06, 1306.53 examples/s]Map:  53%|█████▎    | 9439/17944 [00:07<00:06, 1274.01 examples/s]Map:  53%|█████▎    | 9571/17944 [00:07<00:06, 1283.36 examples/s]Map:  54%|█████▍    | 9704/17944 [00:07<00:06, 1294.13 examples/s]Map:  55%|█████▍    | 9838/17944 [00:07<00:06, 1303.31 examples/s]Map:  57%|█████▋    | 10269/17944 [00:07<00:03, 2149.03 examples/s]Map:  69%|██████▊   | 12296/17944 [00:07<00:00, 7353.80 examples/s]Map:  80%|███████▉  | 14292/17944 [00:07<00:00, 11020.25 examples/s]Map:  91%|█████████ | 16326/17944 [00:07<00:00, 13754.64 examples/s]Map: 100%|██████████| 17944/17944 [00:08<00:00, 2175.95 examples/s] 
Loading checkpoint shards:   0%|          | 0/4 [00:00<?, ?it/s]Loading checkpoint shards:  25%|██▌       | 1/4 [00:01<00:03,  1.24s/it]Loading checkpoint shards:  50%|█████     | 2/4 [00:02<00:02,  1.24s/it]Loading checkpoint shards:  75%|███████▌  | 3/4 [00:03<00:01,  1.23s/it]Loading checkpoint shards: 100%|██████████| 4/4 [00:04<00:00,  1.18s/it]Loading checkpoint shards: 100%|██████████| 4/4 [00:04<00:00,  1.20s/it]
  0%|          | 0/9960 [00:00<?, ?it/s]  2%|▏         | 156/9960 [00:00<00:06, 1556.10it/s]  3%|▎         | 324/9960 [00:00<00:05, 1625.77it/s]  5%|▍         | 487/9960 [00:00<00:05, 1592.18it/s]  6%|▋         | 647/9960 [00:00<00:06, 1463.18it/s]  8%|▊         | 815/9960 [00:00<00:05, 1534.37it/s] 10%|▉         | 983/9960 [00:00<00:05, 1572.61it/s] 12%|█▏        | 1151/9960 [00:00<00:05, 1603.90it/s] 13%|█▎        | 1324/9960 [00:00<00:05, 1642.84it/s] 15%|█▍        | 1491/9960 [00:00<00:05, 1648.76it/s] 17%|█▋        | 1660/9960 [00:01<00:04, 1661.02it/s] 18%|█▊        | 1832/9960 [00:01<00:04, 1678.40it/s] 20%|██        | 2001/9960 [00:01<00:04, 1665.30it/s] 22%|██▏       | 2168/9960 [00:01<00:04, 1634.06it/s] 23%|██▎       | 2332/9960 [00:01<00:04, 1584.38it/s] 25%|██▌       | 2491/9960 [00:01<00:04, 1557.16it/s] 27%|██▋       | 2661/9960 [00:01<00:04, 1597.24it/s] 28%|██▊       | 2831/9960 [00:01<00:04, 1626.30it/s] 30%|███       | 2998/9960 [00:01<00:04, 1638.99it/s] 32%|███▏      | 3165/9960 [00:01<00:04, 1646.87it/s] 33%|███▎      | 3336/9960 [00:02<00:03, 1663.78it/s] 35%|███▌      | 3507/9960 [00:02<00:03, 1675.27it/s] 37%|███▋      | 3675/9960 [00:02<00:03, 1670.51it/s] 39%|███▊      | 3843/9960 [00:02<00:04, 1494.40it/s] 40%|████      | 4003/9960 [00:02<00:03, 1523.26it/s] 42%|████▏     | 4167/9960 [00:02<00:03, 1553.99it/s] 43%|████▎     | 4331/9960 [00:02<00:03, 1577.68it/s] 45%|████▌     | 4497/9960 [00:02<00:03, 1598.83it/s] 47%|████▋     | 4660/9960 [00:02<00:03, 1605.05it/s] 49%|████▊     | 4833/9960 [00:03<00:03, 1639.61it/s] 50%|█████     | 5010/9960 [00:03<00:02, 1677.15it/s] 52%|█████▏    | 5179/9960 [00:03<00:02, 1625.12it/s] 54%|█████▎    | 5343/9960 [00:03<00:02, 1559.89it/s] 55%|█████▌    | 5517/9960 [00:03<00:02, 1610.46it/s] 57%|█████▋    | 5692/9960 [00:03<00:02, 1648.66it/s] 59%|█████▉    | 5865/9960 [00:03<00:02, 1672.12it/s] 61%|██████    | 6038/9960 [00:03<00:02, 1689.01it/s] 62%|██████▏   | 6213/9960 [00:03<00:02, 1706.53it/s] 64%|██████▍   | 6388/9960 [00:03<00:02, 1717.08it/s] 66%|██████▌   | 6560/9960 [00:04<00:01, 1717.42it/s] 68%|██████▊   | 6732/9960 [00:04<00:02, 1577.96it/s] 69%|██████▉   | 6894/9960 [00:04<00:01, 1587.80it/s] 71%|███████   | 7067/9960 [00:04<00:01, 1627.56it/s] 73%|███████▎  | 7240/9960 [00:04<00:01, 1654.94it/s] 74%|███████▍  | 7413/9960 [00:04<00:01, 1675.46it/s] 76%|███████▌  | 7582/9960 [00:04<00:01, 1647.86it/s] 78%|███████▊  | 7756/9960 [00:04<00:01, 1672.52it/s] 80%|███████▉  | 7924/9960 [00:04<00:01, 1666.53it/s] 81%|████████▏ | 8095/9960 [00:04<00:01, 1679.09it/s] 83%|████████▎ | 8264/9960 [00:05<00:01, 1682.26it/s] 85%|████████▍ | 8433/9960 [00:05<00:00, 1626.05it/s] 86%|████████▋ | 8603/9960 [00:05<00:00, 1645.02it/s] 88%|████████▊ | 8771/9960 [00:05<00:00, 1655.16it/s] 90%|████████▉ | 8946/9960 [00:05<00:00, 1681.69it/s] 92%|█████████▏| 9121/9960 [00:05<00:00, 1700.52it/s] 93%|█████████▎| 9295/9960 [00:05<00:00, 1711.50it/s] 95%|█████████▌| 9469/9960 [00:05<00:00, 1718.44it/s] 97%|█████████▋| 9641/9960 [00:05<00:00, 1685.28it/s] 98%|█████████▊| 9810/9960 [00:06<00:00, 1641.81it/s]100%|██████████| 9960/9960 [00:06<00:00, 1628.59it/s]
Epoch 1/20 Batches:   0%|          | 0/1 [00:00<?, ?it/s]We detected that you are passing `past_key_values` as a tuple and this is deprecated and will be removed in v4.43. Please use an appropriate `Cache` class (https://huggingface.co/docs/transformers/v4.41.3/en/internal/generation_utils#transformers.Cache)
Epoch 1/20 Batches: 100%|██████████| 1/1 [00:01<00:00,  1.43s/it]                                                                 epoch_loss: 0.713432788848877
Epoch [1/20], Loss: 0.7134
Best test AUROC: 0.5199, at epoch: 0
Epoch [1/20],Test AUROC: 0.5199
Epoch 2/20 Batches:   0%|          | 0/1 [00:00<?, ?it/s]Epoch 2/20 Batches: 100%|██████████| 1/1 [00:00<00:00,  1.06it/s]                                                                 epoch_loss: 0.6893719434738159
Epoch [2/20], Loss: 0.6894
Best test AUROC: 0.6014, at epoch: 1
Epoch [2/20],Test AUROC: 0.6014
Epoch 3/20 Batches:   0%|          | 0/1 [00:00<?, ?it/s]Epoch 3/20 Batches: 100%|██████████| 1/1 [00:00<00:00,  1.06it/s]                                                                 epoch_loss: 0.6749350428581238
Epoch [3/20], Loss: 0.6749
Best test AUROC: 0.6446, at epoch: 2
Epoch [3/20],Test AUROC: 0.6446
Epoch 4/20 Batches:   0%|          | 0/1 [00:00<?, ?it/s]Epoch 4/20 Batches: 100%|██████████| 1/1 [00:00<00:00,  1.05it/s]                                                                 epoch_loss: 0.6626519560813904
Epoch [4/20], Loss: 0.6627
Best test AUROC: 0.6686, at epoch: 3
Epoch [4/20],Test AUROC: 0.6686
Epoch 5/20 Batches:   0%|          | 0/1 [00:00<?, ?it/s]Epoch 5/20 Batches: 100%|██████████| 1/1 [00:00<00:00,  1.06it/s]                                                                 epoch_loss: 0.6493855714797974
Epoch [5/20], Loss: 0.6494
Best test AUROC: 0.6855, at epoch: 4
Epoch [5/20],Test AUROC: 0.6855
Epoch 6/20 Batches:   0%|          | 0/1 [00:00<?, ?it/s]Epoch 6/20 Batches: 100%|██████████| 1/1 [00:00<00:00,  1.05it/s]                                                                 epoch_loss: 0.6368482708930969
Epoch [6/20], Loss: 0.6368
Best test AUROC: 0.6989, at epoch: 5
Epoch [6/20],Test AUROC: 0.6989
Epoch 7/20 Batches:   0%|          | 0/1 [00:00<?, ?it/s]Epoch 7/20 Batches: 100%|██████████| 1/1 [00:00<00:00,  1.06it/s]                                                                 epoch_loss: 0.6246641874313354
Epoch [7/20], Loss: 0.6247
Best test AUROC: 0.7104, at epoch: 6
Epoch [7/20],Test AUROC: 0.7104
Epoch 8/20 Batches:   0%|          | 0/1 [00:00<?, ?it/s]Epoch 8/20 Batches: 100%|██████████| 1/1 [00:00<00:00,  1.06it/s]                                                                 epoch_loss: 0.6117568016052246
Epoch [8/20], Loss: 0.6118
Best test AUROC: 0.7204, at epoch: 7
Epoch [8/20],Test AUROC: 0.7204
Epoch 9/20 Batches:   0%|          | 0/1 [00:00<?, ?it/s]Epoch 9/20 Batches: 100%|██████████| 1/1 [00:00<00:00,  1.06it/s]                                                                 epoch_loss: 0.5992690324783325
Epoch [9/20], Loss: 0.5993
Best test AUROC: 0.7287, at epoch: 8
Epoch [9/20],Test AUROC: 0.7287
Epoch 10/20 Batches:   0%|          | 0/1 [00:00<?, ?it/s]Epoch 10/20 Batches: 100%|██████████| 1/1 [00:00<00:00,  1.05it/s]                                                                  epoch_loss: 0.5871076583862305
Epoch [10/20], Loss: 0.5871
Best test AUROC: 0.7362, at epoch: 9
Epoch [10/20],Test AUROC: 0.7362
Epoch 11/20 Batches:   0%|          | 0/1 [00:00<?, ?it/s]Epoch 11/20 Batches: 100%|██████████| 1/1 [00:00<00:00,  1.06it/s]                                                                  epoch_loss: 0.5748921632766724
Epoch [11/20], Loss: 0.5749
Best test AUROC: 0.7429, at epoch: 10
Epoch [11/20],Test AUROC: 0.7429
Epoch 12/20 Batches:   0%|          | 0/1 [00:00<?, ?it/s]Epoch 12/20 Batches: 100%|██████████| 1/1 [00:00<00:00,  1.06it/s]                                                                  epoch_loss: 0.5623431205749512
Epoch [12/20], Loss: 0.5623
Best test AUROC: 0.7490, at epoch: 11
Epoch [12/20],Test AUROC: 0.7490
Epoch 13/20 Batches:   0%|          | 0/1 [00:00<?, ?it/s]Epoch 13/20 Batches: 100%|██████████| 1/1 [00:00<00:00,  1.06it/s]                                                                  epoch_loss: 0.549148678779602
Epoch [13/20], Loss: 0.5491
Best test AUROC: 0.7538, at epoch: 12
Epoch [13/20],Test AUROC: 0.7538
Epoch 14/20 Batches:   0%|          | 0/1 [00:00<?, ?it/s]Epoch 14/20 Batches: 100%|██████████| 1/1 [00:00<00:00,  1.06it/s]                                                                  epoch_loss: 0.5369392037391663
Epoch [14/20], Loss: 0.5369
Best test AUROC: 0.7574, at epoch: 13
Epoch [14/20],Test AUROC: 0.7574
Epoch 15/20 Batches:   0%|          | 0/1 [00:00<?, ?it/s]Epoch 15/20 Batches: 100%|██████████| 1/1 [00:00<00:00,  1.06it/s]                                                                  epoch_loss: 0.5255359411239624
Epoch [15/20], Loss: 0.5255
Best test AUROC: 0.7600, at epoch: 14
Epoch [15/20],Test AUROC: 0.7600
Epoch 16/20 Batches:   0%|          | 0/1 [00:00<?, ?it/s]Epoch 16/20 Batches: 100%|██████████| 1/1 [00:00<00:00,  1.06it/s]                                                                  epoch_loss: 0.5138002634048462
Epoch [16/20], Loss: 0.5138
Best test AUROC: 0.7625, at epoch: 15
Epoch [16/20],Test AUROC: 0.7625
Epoch 17/20 Batches:   0%|          | 0/1 [00:00<?, ?it/s]Epoch 17/20 Batches: 100%|██████████| 1/1 [00:00<00:00,  1.06it/s]                                                                  epoch_loss: 0.5021305084228516
Epoch [17/20], Loss: 0.5021
Best test AUROC: 0.7652, at epoch: 16
Epoch [17/20],Test AUROC: 0.7652
Epoch 18/20 Batches:   0%|          | 0/1 [00:00<?, ?it/s]Epoch 18/20 Batches: 100%|██████████| 1/1 [00:00<00:00,  1.06it/s]                                                                  epoch_loss: 0.4907175898551941
Epoch [18/20], Loss: 0.4907
Best test AUROC: 0.7682, at epoch: 17
Epoch [18/20],Test AUROC: 0.7682
Epoch 19/20 Batches:   0%|          | 0/1 [00:00<?, ?it/s]Epoch 19/20 Batches: 100%|██████████| 1/1 [00:00<00:00,  1.06it/s]                                                                  epoch_loss: 0.47892123460769653
Epoch [19/20], Loss: 0.4789
Best test AUROC: 0.7709, at epoch: 18
Epoch [19/20],Test AUROC: 0.7709
Epoch 20/20 Batches:   0%|          | 0/1 [00:00<?, ?it/s]Epoch 20/20 Batches: 100%|██████████| 1/1 [00:00<00:00,  1.06it/s]                                                                  epoch_loss: 0.4658551812171936
Epoch [20/20], Loss: 0.4659
Best test AUROC: 0.7730, at epoch: 19
Epoch [20/20],Test AUROC: 0.7730
  0%|          | 0/115 [00:00<?, ?it/s]  1%|          | 1/115 [00:00<00:55,  2.07it/s]  2%|▏         | 2/115 [00:01<00:58,  1.95it/s]  3%|▎         | 3/115 [00:01<00:48,  2.30it/s]  3%|▎         | 4/115 [00:01<00:52,  2.11it/s]  4%|▍         | 5/115 [00:02<00:53,  2.06it/s]  5%|▌         | 6/115 [00:02<00:49,  2.18it/s]  6%|▌         | 7/115 [00:03<00:46,  2.35it/s]  7%|▋         | 8/115 [00:03<00:45,  2.34it/s]  8%|▊         | 9/115 [00:04<00:47,  2.22it/s]  9%|▊         | 10/115 [00:04<00:49,  2.10it/s] 10%|▉         | 11/115 [00:04<00:44,  2.32it/s] 10%|█         | 12/115 [00:05<00:48,  2.11it/s] 11%|█▏        | 13/115 [00:06<00:48,  2.08it/s] 12%|█▏        | 14/115 [00:06<00:49,  2.04it/s] 13%|█▎        | 15/115 [00:06<00:44,  2.25it/s] 14%|█▍        | 16/115 [00:07<00:48,  2.04it/s] 15%|█▍        | 17/115 [00:08<00:50,  1.95it/s] 16%|█▌        | 18/115 [00:08<00:51,  1.88it/s] 17%|█▋        | 19/115 [00:08<00:45,  2.11it/s] 17%|█▋        | 20/115 [00:09<00:43,  2.17it/s] 18%|█▊        | 21/115 [00:09<00:45,  2.07it/s] 19%|█▉        | 22/115 [00:10<00:45,  2.05it/s] 20%|██        | 23/115 [00:10<00:40,  2.26it/s] 21%|██        | 24/115 [00:11<00:39,  2.32it/s] 22%|██▏       | 25/115 [00:11<00:36,  2.49it/s] 23%|██▎       | 26/115 [00:11<00:33,  2.63it/s] 23%|██▎       | 27/115 [00:12<00:37,  2.34it/s] 24%|██▍       | 28/115 [00:12<00:40,  2.16it/s] 25%|██▌       | 29/115 [00:13<00:44,  1.92it/s] 26%|██▌       | 30/115 [00:14<00:44,  1.91it/s] 27%|██▋       | 31/115 [00:14<00:40,  2.07it/s] 28%|██▊       | 32/115 [00:14<00:40,  2.05it/s] 29%|██▊       | 33/115 [00:15<00:42,  1.92it/s] 30%|██▉       | 34/115 [00:16<00:40,  1.98it/s] 30%|███       | 35/115 [00:16<00:39,  2.04it/s] 31%|███▏      | 36/115 [00:17<00:40,  1.97it/s] 32%|███▏      | 37/115 [00:17<00:40,  1.91it/s] 33%|███▎      | 38/115 [00:18<00:39,  1.95it/s] 34%|███▍      | 39/115 [00:18<00:36,  2.09it/s] 35%|███▍      | 40/115 [00:18<00:34,  2.17it/s] 36%|███▌      | 41/115 [00:19<00:37,  1.96it/s] 37%|███▋      | 42/115 [00:20<00:36,  1.98it/s] 37%|███▋      | 43/115 [00:20<00:41,  1.72it/s] 38%|███▊      | 44/115 [00:21<00:46,  1.53it/s] 39%|███▉      | 45/115 [00:22<00:43,  1.59it/s] 40%|████      | 46/115 [00:22<00:42,  1.62it/s] 41%|████      | 47/115 [00:23<00:39,  1.72it/s] 42%|████▏     | 48/115 [00:24<00:51,  1.30it/s] 43%|████▎     | 49/115 [00:25<00:48,  1.36it/s] 43%|████▎     | 50/115 [00:25<00:44,  1.46it/s] 44%|████▍     | 51/115 [00:26<00:40,  1.58it/s] 45%|████▌     | 52/115 [00:26<00:40,  1.56it/s] 46%|████▌     | 53/115 [00:27<00:39,  1.58it/s] 47%|████▋     | 54/115 [00:28<00:37,  1.63it/s] 48%|████▊     | 55/115 [00:28<00:31,  1.90it/s] 49%|████▊     | 56/115 [00:28<00:29,  2.02it/s] 50%|████▉     | 57/115 [00:29<00:25,  2.30it/s] 50%|█████     | 58/115 [00:29<00:23,  2.43it/s] 51%|█████▏    | 59/115 [00:29<00:21,  2.64it/s] 52%|█████▏    | 60/115 [00:30<00:23,  2.36it/s] 53%|█████▎    | 61/115 [00:30<00:23,  2.30it/s] 54%|█████▍    | 62/115 [00:31<00:24,  2.16it/s] 55%|█████▍    | 63/115 [00:31<00:26,  1.95it/s] 56%|█████▌    | 64/115 [00:32<00:25,  2.00it/s] 57%|█████▋    | 65/115 [00:32<00:24,  2.07it/s] 57%|█████▋    | 66/115 [00:33<00:24,  2.00it/s] 58%|█████▊    | 67/115 [00:33<00:22,  2.17it/s] 59%|█████▉    | 68/115 [00:34<00:20,  2.26it/s] 60%|██████    | 69/115 [00:34<00:21,  2.18it/s] 61%|██████    | 70/115 [00:35<00:21,  2.12it/s] 62%|██████▏   | 71/115 [00:35<00:20,  2.14it/s] 63%|██████▎   | 72/115 [00:36<00:20,  2.09it/s] 63%|██████▎   | 73/115 [00:36<00:18,  2.25it/s] 64%|██████▍   | 74/115 [00:36<00:17,  2.34it/s] 65%|██████▌   | 75/115 [00:37<00:17,  2.31it/s] 66%|██████▌   | 76/115 [00:37<00:18,  2.13it/s] 67%|██████▋   | 77/115 [00:38<00:18,  2.04it/s] 68%|██████▊   | 78/115 [00:38<00:16,  2.19it/s] 69%|██████▊   | 79/115 [00:39<00:17,  2.08it/s] 70%|██████▉   | 80/115 [00:39<00:15,  2.24it/s] 70%|███████   | 81/115 [00:40<00:14,  2.30it/s] 71%|███████▏  | 82/115 [00:40<00:14,  2.31it/s] 72%|███████▏  | 83/115 [00:40<00:13,  2.38it/s] 73%|███████▎  | 84/115 [00:41<00:13,  2.24it/s] 74%|███████▍  | 85/115 [00:41<00:13,  2.19it/s] 75%|███████▍  | 86/115 [00:42<00:13,  2.08it/s] 76%|███████▌  | 87/115 [00:43<00:15,  1.85it/s] 77%|███████▋  | 88/115 [00:43<00:14,  1.90it/s] 77%|███████▋  | 89/115 [00:43<00:11,  2.18it/s] 78%|███████▊  | 90/115 [00:44<00:11,  2.19it/s] 79%|███████▉  | 91/115 [00:45<00:12,  1.89it/s] 80%|████████  | 92/115 [00:45<00:12,  1.79it/s] 81%|████████  | 93/115 [00:46<00:12,  1.79it/s] 82%|████████▏ | 94/115 [00:46<00:11,  1.89it/s] 83%|████████▎ | 95/115 [00:47<00:10,  1.95it/s] 83%|████████▎ | 96/115 [00:47<00:10,  1.83it/s] 84%|████████▍ | 97/115 [00:48<00:09,  1.89it/s] 85%|████████▌ | 98/115 [00:48<00:08,  2.06it/s] 86%|████████▌ | 99/115 [00:49<00:07,  2.14it/s] 87%|████████▋ | 100/115 [00:49<00:06,  2.30it/s] 88%|████████▊ | 101/115 [00:49<00:06,  2.21it/s] 89%|████████▊ | 102/115 [00:50<00:06,  2.15it/s] 90%|████████▉ | 103/115 [00:50<00:05,  2.36it/s] 90%|█████████ | 104/115 [00:51<00:04,  2.27it/s] 91%|█████████▏| 105/115 [00:51<00:03,  2.59it/s] 92%|█████████▏| 106/115 [00:51<00:03,  2.39it/s] 93%|█████████▎| 107/115 [00:52<00:03,  2.46it/s] 94%|█████████▍| 108/115 [00:52<00:02,  2.65it/s] 95%|█████████▍| 109/115 [00:52<00:02,  2.78it/s] 96%|█████████▌| 110/115 [00:53<00:02,  1.88it/s] 97%|█████████▋| 111/115 [00:54<00:02,  1.66it/s] 97%|█████████▋| 112/115 [00:56<00:02,  1.07it/s] 98%|█████████▊| 113/115 [00:56<00:01,  1.28it/s] 99%|█████████▉| 114/115 [00:57<00:00,  1.46it/s]100%|██████████| 115/115 [00:57<00:00,  2.01it/s]
tsv_main1.py:175: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  exemplar_label = torch.tensor(exemplar_labels).cuda()
tsv_main1.py:182: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  augmented_labels = torch.concat((selected_labels, torch.tensor(exemplar_labels).clone().cuda()))
Epoch 1/20 Batches:   0%|          | 0/3 [00:00<?, ?it/s]/data/zyy/LLM/tsv/train_utils.py:26: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  labels = torch.tensor(labels, dtype=torch.long, device=device)
Epoch 1/20 Batches:  33%|███▎      | 1/3 [00:01<00:02,  1.14s/it]Epoch 1/20 Batches:  67%|██████▋   | 2/3 [00:01<00:00,  1.29it/s]Epoch 1/20 Batches: 100%|██████████| 3/3 [00:02<00:00,  1.18it/s]                                                                 epoch_loss: 0.4398447275161743
Epoch [1/20], Loss: 0.4398
Best test AUROC: 0.7950, at epoch: 20
Epoch 2/20 Batches:   0%|          | 0/3 [00:00<?, ?it/s]/data/zyy/LLM/tsv/train_utils.py:26: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  labels = torch.tensor(labels, dtype=torch.long, device=device)
Epoch 2/20 Batches:  33%|███▎      | 1/3 [00:01<00:02,  1.15s/it]Epoch 2/20 Batches:  67%|██████▋   | 2/3 [00:01<00:00,  1.30it/s]Epoch 2/20 Batches: 100%|██████████| 3/3 [00:02<00:00,  1.17it/s]                                                                 epoch_loss: 0.32998937865098316
Epoch [2/20], Loss: 0.3300
Best test AUROC: 0.8022, at epoch: 21
Epoch 3/20 Batches:   0%|          | 0/3 [00:00<?, ?it/s]/data/zyy/LLM/tsv/train_utils.py:26: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  labels = torch.tensor(labels, dtype=torch.long, device=device)
Epoch 3/20 Batches:  33%|███▎      | 1/3 [00:01<00:02,  1.14s/it]Epoch 3/20 Batches:  67%|██████▋   | 2/3 [00:01<00:00,  1.29it/s]Epoch 3/20 Batches: 100%|██████████| 3/3 [00:02<00:00,  1.17it/s]                                                                 epoch_loss: 0.2726205537716548
Epoch [3/20], Loss: 0.2726
Best test AUROC: 0.8069, at epoch: 22
Epoch 4/20 Batches:   0%|          | 0/3 [00:00<?, ?it/s]/data/zyy/LLM/tsv/train_utils.py:26: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  labels = torch.tensor(labels, dtype=torch.long, device=device)
Epoch 4/20 Batches:  33%|███▎      | 1/3 [00:01<00:02,  1.14s/it]Epoch 4/20 Batches:  67%|██████▋   | 2/3 [00:01<00:00,  1.30it/s]Epoch 4/20 Batches: 100%|██████████| 3/3 [00:02<00:00,  1.18it/s]                                                                 epoch_loss: 0.23159982760747275
Epoch [4/20], Loss: 0.2316
Epoch 5/20 Batches:   0%|          | 0/3 [00:00<?, ?it/s]/data/zyy/LLM/tsv/train_utils.py:26: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  labels = torch.tensor(labels, dtype=torch.long, device=device)
Epoch 5/20 Batches:  33%|███▎      | 1/3 [00:01<00:02,  1.14s/it]Epoch 5/20 Batches:  67%|██████▋   | 2/3 [00:01<00:00,  1.29it/s]Epoch 5/20 Batches: 100%|██████████| 3/3 [00:02<00:00,  1.18it/s]                                                                 epoch_loss: 0.19648362696170807
Epoch [5/20], Loss: 0.1965
Epoch 6/20 Batches:   0%|          | 0/3 [00:00<?, ?it/s]/data/zyy/LLM/tsv/train_utils.py:26: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  labels = torch.tensor(labels, dtype=torch.long, device=device)
Epoch 6/20 Batches:  33%|███▎      | 1/3 [00:01<00:02,  1.14s/it]Epoch 6/20 Batches:  67%|██████▋   | 2/3 [00:01<00:00,  1.30it/s]Epoch 6/20 Batches: 100%|██████████| 3/3 [00:02<00:00,  1.18it/s]                                                                 epoch_loss: 0.16626528153816858
Epoch [6/20], Loss: 0.1663
Epoch 7/20 Batches:   0%|          | 0/3 [00:00<?, ?it/s]/data/zyy/LLM/tsv/train_utils.py:26: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  labels = torch.tensor(labels, dtype=torch.long, device=device)
Epoch 7/20 Batches:  33%|███▎      | 1/3 [00:01<00:02,  1.14s/it]Epoch 7/20 Batches:  67%|██████▋   | 2/3 [00:01<00:00,  1.29it/s]Epoch 7/20 Batches: 100%|██████████| 3/3 [00:02<00:00,  1.17it/s]                                                                 epoch_loss: 0.13876580943663916
Epoch [7/20], Loss: 0.1388
Epoch 8/20 Batches:   0%|          | 0/3 [00:00<?, ?it/s]/data/zyy/LLM/tsv/train_utils.py:26: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  labels = torch.tensor(labels, dtype=torch.long, device=device)
Epoch 8/20 Batches:  33%|███▎      | 1/3 [00:01<00:02,  1.14s/it]Epoch 8/20 Batches:  67%|██████▋   | 2/3 [00:01<00:00,  1.30it/s]Epoch 8/20 Batches: 100%|██████████| 3/3 [00:02<00:00,  1.18it/s]                                                                 epoch_loss: 0.11512421692411105
Epoch [8/20], Loss: 0.1151
Epoch 9/20 Batches:   0%|          | 0/3 [00:00<?, ?it/s]/data/zyy/LLM/tsv/train_utils.py:26: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  labels = torch.tensor(labels, dtype=torch.long, device=device)
Epoch 9/20 Batches:  33%|███▎      | 1/3 [00:01<00:02,  1.14s/it]Epoch 9/20 Batches:  67%|██████▋   | 2/3 [00:01<00:00,  1.30it/s]Epoch 9/20 Batches: 100%|██████████| 3/3 [00:02<00:00,  1.18it/s]                                                                 epoch_loss: 0.09382959455251694
Epoch [9/20], Loss: 0.0938
Epoch 10/20 Batches:   0%|          | 0/3 [00:00<?, ?it/s]/data/zyy/LLM/tsv/train_utils.py:26: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  labels = torch.tensor(labels, dtype=torch.long, device=device)
Epoch 10/20 Batches:  33%|███▎      | 1/3 [00:01<00:02,  1.15s/it]Epoch 10/20 Batches:  67%|██████▋   | 2/3 [00:01<00:00,  1.29it/s]Epoch 10/20 Batches: 100%|██████████| 3/3 [00:02<00:00,  1.17it/s]                                                                  epoch_loss: 0.07637614260117213
Epoch [10/20], Loss: 0.0764
Epoch 11/20 Batches:   0%|          | 0/3 [00:00<?, ?it/s]/data/zyy/LLM/tsv/train_utils.py:26: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  labels = torch.tensor(labels, dtype=torch.long, device=device)
Epoch 11/20 Batches:  33%|███▎      | 1/3 [00:01<00:02,  1.14s/it]Epoch 11/20 Batches:  67%|██████▋   | 2/3 [00:01<00:00,  1.30it/s]Epoch 11/20 Batches: 100%|██████████| 3/3 [00:02<00:00,  1.18it/s]                                                                  epoch_loss: 0.06340098505218823
Epoch [11/20], Loss: 0.0634
Epoch 12/20 Batches:   0%|          | 0/3 [00:00<?, ?it/s]/data/zyy/LLM/tsv/train_utils.py:26: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  labels = torch.tensor(labels, dtype=torch.long, device=device)
Epoch 12/20 Batches:  33%|███▎      | 1/3 [00:01<00:02,  1.14s/it]Epoch 12/20 Batches:  67%|██████▋   | 2/3 [00:01<00:00,  1.29it/s]Epoch 12/20 Batches: 100%|██████████| 3/3 [00:02<00:00,  1.17it/s]                                                                  epoch_loss: 0.05068785945574442
Epoch [12/20], Loss: 0.0507
Epoch 13/20 Batches:   0%|          | 0/3 [00:00<?, ?it/s]/data/zyy/LLM/tsv/train_utils.py:26: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  labels = torch.tensor(labels, dtype=torch.long, device=device)
Epoch 13/20 Batches:  33%|███▎      | 1/3 [00:01<00:02,  1.14s/it]Epoch 13/20 Batches:  67%|██████▋   | 2/3 [00:01<00:00,  1.30it/s]Epoch 13/20 Batches: 100%|██████████| 3/3 [00:02<00:00,  1.17it/s]                                                                  epoch_loss: 0.039325558890899025
Epoch [13/20], Loss: 0.0393
Epoch 14/20 Batches:   0%|          | 0/3 [00:00<?, ?it/s]/data/zyy/LLM/tsv/train_utils.py:26: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  labels = torch.tensor(labels, dtype=torch.long, device=device)
Epoch 14/20 Batches:  33%|███▎      | 1/3 [00:01<00:02,  1.14s/it]Epoch 14/20 Batches:  67%|██████▋   | 2/3 [00:01<00:00,  1.30it/s]Epoch 14/20 Batches: 100%|██████████| 3/3 [00:02<00:00,  1.17it/s]                                                                  epoch_loss: 0.03131735883653164
Epoch [14/20], Loss: 0.0313
Epoch 15/20 Batches:   0%|          | 0/3 [00:00<?, ?it/s]/data/zyy/LLM/tsv/train_utils.py:26: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  labels = torch.tensor(labels, dtype=torch.long, device=device)
Epoch 15/20 Batches:  33%|███▎      | 1/3 [00:01<00:02,  1.14s/it]Epoch 15/20 Batches:  67%|██████▋   | 2/3 [00:01<00:00,  1.29it/s]Epoch 15/20 Batches: 100%|██████████| 3/3 [00:02<00:00,  1.17it/s]                                                                  epoch_loss: 0.024774738897879917
Epoch [15/20], Loss: 0.0248
Epoch 16/20 Batches:   0%|          | 0/3 [00:00<?, ?it/s]/data/zyy/LLM/tsv/train_utils.py:26: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  labels = torch.tensor(labels, dtype=torch.long, device=device)
Epoch 16/20 Batches:  33%|███▎      | 1/3 [00:01<00:02,  1.15s/it]Epoch 16/20 Batches:  67%|██████▋   | 2/3 [00:01<00:00,  1.29it/s]Epoch 16/20 Batches: 100%|██████████| 3/3 [00:02<00:00,  1.17it/s]                                                                  epoch_loss: 0.019851739207903545
Epoch [16/20], Loss: 0.0199
Epoch 17/20 Batches:   0%|          | 0/3 [00:00<?, ?it/s]/data/zyy/LLM/tsv/train_utils.py:26: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  labels = torch.tensor(labels, dtype=torch.long, device=device)
Epoch 17/20 Batches:  33%|███▎      | 1/3 [00:01<00:02,  1.14s/it]Epoch 17/20 Batches:  67%|██████▋   | 2/3 [00:01<00:00,  1.30it/s]Epoch 17/20 Batches: 100%|██████████| 3/3 [00:02<00:00,  1.18it/s]                                                                  epoch_loss: 0.015795874098936718
Epoch [17/20], Loss: 0.0158
Epoch 18/20 Batches:   0%|          | 0/3 [00:00<?, ?it/s]/data/zyy/LLM/tsv/train_utils.py:26: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  labels = torch.tensor(labels, dtype=torch.long, device=device)
Epoch 18/20 Batches:  33%|███▎      | 1/3 [00:01<00:02,  1.14s/it]Epoch 18/20 Batches:  67%|██████▋   | 2/3 [00:01<00:00,  1.30it/s]Epoch 18/20 Batches: 100%|██████████| 3/3 [00:02<00:00,  1.18it/s]                                                                  epoch_loss: 0.0128252476764222
Epoch [18/20], Loss: 0.0128
Epoch 19/20 Batches:   0%|          | 0/3 [00:00<?, ?it/s]/data/zyy/LLM/tsv/train_utils.py:26: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  labels = torch.tensor(labels, dtype=torch.long, device=device)
Epoch 19/20 Batches:  33%|███▎      | 1/3 [00:01<00:02,  1.14s/it]Epoch 19/20 Batches:  67%|██████▋   | 2/3 [00:01<00:00,  1.30it/s]Epoch 19/20 Batches: 100%|██████████| 3/3 [00:02<00:00,  1.18it/s]                                                                  epoch_loss: 0.010452698838586608
Epoch [19/20], Loss: 0.0105
Epoch 20/20 Batches:   0%|          | 0/3 [00:00<?, ?it/s]/data/zyy/LLM/tsv/train_utils.py:26: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  labels = torch.tensor(labels, dtype=torch.long, device=device)
Epoch 20/20 Batches:  33%|███▎      | 1/3 [00:01<00:02,  1.14s/it]Epoch 20/20 Batches:  67%|██████▋   | 2/3 [00:01<00:00,  1.29it/s]Epoch 20/20 Batches: 100%|██████████| 3/3 [00:02<00:00,  1.17it/s]                                                                  epoch_loss: 0.008509089394162098
Epoch [20/20], Loss: 0.0085
best_test_auroc: 0.8069297984832321
