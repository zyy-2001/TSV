Map:   0%|          | 0/17944 [00:00<?, ? examples/s]Map:   1%|          | 118/17944 [00:00<00:15, 1150.63 examples/s]Map:   1%|▏         | 248/17944 [00:00<00:14, 1232.02 examples/s]Map:   2%|▏         | 378/17944 [00:00<00:13, 1258.47 examples/s]Map:   3%|▎         | 508/17944 [00:00<00:13, 1269.89 examples/s]Map:   4%|▎         | 639/17944 [00:00<00:13, 1278.49 examples/s]Map:   4%|▍         | 768/17944 [00:00<00:13, 1280.30 examples/s]Map:   5%|▌         | 962/17944 [00:00<00:13, 1280.95 examples/s]Map:   6%|▌         | 1093/17944 [00:00<00:13, 1287.20 examples/s]Map:   7%|▋         | 1225/17944 [00:00<00:12, 1292.73 examples/s]Map:   8%|▊         | 1356/17944 [00:01<00:12, 1295.97 examples/s]Map:   8%|▊         | 1486/17944 [00:01<00:12, 1293.87 examples/s]Map:   9%|▉         | 1617/17944 [00:01<00:12, 1297.27 examples/s]Map:  10%|▉         | 1748/17944 [00:01<00:12, 1300.19 examples/s]Map:  10%|█         | 1879/17944 [00:01<00:12, 1302.24 examples/s]Map:  11%|█         | 2011/17944 [00:01<00:12, 1303.06 examples/s]Map:  12%|█▏        | 2142/17944 [00:01<00:12, 1304.06 examples/s]Map:  13%|█▎        | 2338/17944 [00:01<00:11, 1301.20 examples/s]Map:  14%|█▍        | 2470/17944 [00:01<00:11, 1302.28 examples/s]Map:  14%|█▍        | 2601/17944 [00:02<00:11, 1301.94 examples/s]Map:  15%|█▌        | 2732/17944 [00:02<00:11, 1299.24 examples/s]Map:  16%|█▋        | 2924/17944 [00:02<00:11, 1286.86 examples/s]Map:  17%|█▋        | 3054/17944 [00:02<00:11, 1285.93 examples/s]Map:  18%|█▊        | 3185/17944 [00:02<00:11, 1289.69 examples/s]Map:  18%|█▊        | 3316/17944 [00:02<00:11, 1292.73 examples/s]Map:  19%|█▉        | 3447/17944 [00:02<00:11, 1294.79 examples/s]Map:  20%|█▉        | 3578/17944 [00:02<00:11, 1298.05 examples/s]Map:  21%|██        | 3772/17944 [00:02<00:10, 1294.59 examples/s]Map:  22%|██▏       | 3963/17944 [00:03<00:10, 1282.22 examples/s]Map:  23%|██▎       | 4093/17944 [00:03<00:10, 1283.16 examples/s]Map:  24%|██▎       | 4223/17944 [00:03<00:10, 1284.37 examples/s]Map:  24%|██▍       | 4355/17944 [00:03<00:10, 1289.96 examples/s]Map:  25%|██▌       | 4486/17944 [00:03<00:10, 1292.93 examples/s]Map:  26%|██▌       | 4616/17944 [00:03<00:10, 1293.89 examples/s]Map:  26%|██▋       | 4747/17944 [00:03<00:10, 1296.43 examples/s]Map:  27%|██▋       | 4879/17944 [00:03<00:10, 1298.85 examples/s]Map:  28%|██▊       | 5009/17944 [00:03<00:09, 1296.62 examples/s]Map:  29%|██▉       | 5202/17944 [00:04<00:09, 1288.53 examples/s]Map:  30%|██▉       | 5334/17944 [00:04<00:09, 1292.80 examples/s]Map:  30%|███       | 5464/17944 [00:04<00:09, 1291.85 examples/s]Map:  31%|███       | 5595/17944 [00:04<00:09, 1289.21 examples/s]Map:  32%|███▏      | 5726/17944 [00:04<00:09, 1291.51 examples/s]Map:  33%|███▎      | 5857/17944 [00:04<00:09, 1294.59 examples/s]Map:  33%|███▎      | 5988/17944 [00:04<00:09, 1296.11 examples/s]Map:  34%|███▍      | 6120/17944 [00:04<00:09, 1297.95 examples/s]Map:  35%|███▌      | 6314/17944 [00:04<00:08, 1293.44 examples/s]Map:  36%|███▌      | 6445/17944 [00:04<00:08, 1295.83 examples/s]Map:  37%|███▋      | 6577/17944 [00:05<00:08, 1297.62 examples/s]Map:  37%|███▋      | 6708/17944 [00:05<00:08, 1298.60 examples/s]Map:  38%|███▊      | 6839/17944 [00:05<00:08, 1299.11 examples/s]Map:  39%|███▉      | 7029/17944 [00:05<00:08, 1282.31 examples/s]Map:  40%|████      | 7220/17944 [00:05<00:08, 1275.24 examples/s]Map:  41%|████      | 7352/17944 [00:05<00:08, 1282.22 examples/s]Map:  42%|████▏     | 7483/17944 [00:05<00:08, 1287.02 examples/s]Map:  42%|████▏     | 7614/17944 [00:05<00:08, 1290.83 examples/s]Map:  43%|████▎     | 7798/17944 [00:06<00:08, 1262.20 examples/s]Map:  44%|████▍     | 7929/17944 [00:06<00:07, 1272.79 examples/s]Map:  45%|████▍     | 8060/17944 [00:06<00:07, 1280.19 examples/s]Map:  46%|████▌     | 8191/17944 [00:06<00:07, 1284.80 examples/s]Map:  46%|████▋     | 8322/17944 [00:06<00:07, 1287.97 examples/s]Map:  47%|████▋     | 8453/17944 [00:06<00:07, 1292.51 examples/s]Map:  48%|████▊     | 8585/17944 [00:06<00:07, 1296.23 examples/s]Map:  49%|████▉     | 8780/17944 [00:06<00:07, 1291.59 examples/s]Map:  50%|████▉     | 8911/17944 [00:06<00:06, 1294.17 examples/s]Map:  50%|█████     | 9042/17944 [00:07<00:06, 1296.73 examples/s]Map:  51%|█████     | 9173/17944 [00:07<00:06, 1298.29 examples/s]Map:  52%|█████▏    | 9305/17944 [00:07<00:06, 1300.00 examples/s]Map:  53%|█████▎    | 9485/17944 [00:07<00:06, 1258.50 examples/s]Map:  54%|█████▎    | 9616/17944 [00:07<00:06, 1270.02 examples/s]Map:  54%|█████▍    | 9747/17944 [00:07<00:06, 1278.80 examples/s]Map:  55%|█████▌    | 9878/17944 [00:07<00:06, 1285.77 examples/s]Map:  60%|██████    | 10833/17944 [00:07<00:01, 3644.47 examples/s]Map:  72%|███████▏  | 12837/17944 [00:07<00:00, 8395.82 examples/s]Map:  82%|████████▏ | 14803/17944 [00:07<00:00, 11692.80 examples/s]Map:  94%|█████████▎| 16797/17944 [00:08<00:00, 14123.91 examples/s]Map: 100%|██████████| 17944/17944 [00:08<00:00, 2156.83 examples/s] 
Loading checkpoint shards:   0%|          | 0/4 [00:00<?, ?it/s]Loading checkpoint shards:  25%|██▌       | 1/4 [00:01<00:03,  1.20s/it]Loading checkpoint shards:  50%|█████     | 2/4 [00:02<00:02,  1.19s/it]Loading checkpoint shards:  75%|███████▌  | 3/4 [00:03<00:01,  1.18s/it]Loading checkpoint shards: 100%|██████████| 4/4 [00:04<00:00,  1.14s/it]Loading checkpoint shards: 100%|██████████| 4/4 [00:04<00:00,  1.16s/it]
  0%|          | 0/9960 [00:00<?, ?it/s]  2%|▏         | 155/9960 [00:00<00:06, 1545.78it/s]  3%|▎         | 321/9960 [00:00<00:05, 1612.67it/s]  5%|▍         | 491/9960 [00:00<00:05, 1652.04it/s]  7%|▋         | 659/9960 [00:00<00:05, 1659.59it/s]  8%|▊         | 827/9960 [00:00<00:05, 1666.85it/s] 10%|█         | 996/9960 [00:00<00:05, 1672.31it/s] 12%|█▏        | 1165/9960 [00:00<00:05, 1676.36it/s] 13%|█▎        | 1336/9960 [00:00<00:05, 1684.62it/s] 15%|█▌        | 1505/9960 [00:00<00:05, 1643.70it/s] 17%|█▋        | 1672/9960 [00:01<00:05, 1649.36it/s] 19%|█▊        | 1843/9960 [00:01<00:04, 1666.96it/s] 20%|██        | 2015/9960 [00:01<00:04, 1681.05it/s] 22%|██▏       | 2188/9960 [00:01<00:04, 1693.90it/s] 24%|██▎       | 2358/9960 [00:01<00:04, 1690.88it/s] 25%|██▌       | 2528/9960 [00:01<00:04, 1685.84it/s] 27%|██▋       | 2697/9960 [00:01<00:04, 1683.67it/s] 29%|██▉       | 2866/9960 [00:01<00:04, 1678.99it/s] 30%|███       | 3034/9960 [00:01<00:04, 1657.26it/s] 32%|███▏      | 3201/9960 [00:01<00:04, 1658.95it/s] 34%|███▍      | 3371/9960 [00:02<00:03, 1670.23it/s] 36%|███▌      | 3539/9960 [00:02<00:03, 1659.37it/s] 37%|███▋      | 3705/9960 [00:02<00:03, 1654.20it/s] 39%|███▉      | 3871/9960 [00:02<00:03, 1647.59it/s] 41%|████      | 4036/9960 [00:02<00:03, 1629.85it/s] 42%|████▏     | 4200/9960 [00:02<00:03, 1625.20it/s] 44%|████▍     | 4364/9960 [00:02<00:03, 1628.56it/s] 45%|████▌     | 4527/9960 [00:02<00:03, 1619.34it/s] 47%|████▋     | 4690/9960 [00:02<00:03, 1622.28it/s] 49%|████▉     | 4862/9960 [00:02<00:03, 1650.12it/s] 51%|█████     | 5038/9960 [00:03<00:02, 1681.78it/s] 52%|█████▏    | 5211/9960 [00:03<00:02, 1693.65it/s] 54%|█████▍    | 5382/9960 [00:03<00:02, 1695.74it/s] 56%|█████▌    | 5555/9960 [00:03<00:02, 1704.36it/s] 57%|█████▊    | 5727/9960 [00:03<00:02, 1708.16it/s] 59%|█████▉    | 5899/9960 [00:03<00:02, 1711.37it/s] 61%|██████    | 6071/9960 [00:03<00:02, 1712.00it/s] 63%|██████▎   | 6243/9960 [00:03<00:02, 1712.70it/s] 64%|██████▍   | 6416/9960 [00:03<00:02, 1714.92it/s] 66%|██████▌   | 6588/9960 [00:03<00:01, 1695.54it/s] 68%|██████▊   | 6758/9960 [00:04<00:01, 1690.58it/s] 70%|██████▉   | 6928/9960 [00:04<00:01, 1682.77it/s] 71%|███████▏  | 7097/9960 [00:04<00:01, 1674.44it/s] 73%|███████▎  | 7265/9960 [00:04<00:01, 1667.52it/s] 75%|███████▍  | 7432/9960 [00:04<00:01, 1652.32it/s] 76%|███████▋  | 7598/9960 [00:04<00:01, 1607.97it/s] 78%|███████▊  | 7760/9960 [00:04<00:01, 1600.33it/s] 80%|███████▉  | 7922/9960 [00:04<00:01, 1605.54it/s] 81%|████████  | 8086/9960 [00:04<00:01, 1615.59it/s] 83%|████████▎ | 8249/9960 [00:04<00:01, 1617.96it/s] 84%|████████▍ | 8413/9960 [00:05<00:00, 1622.96it/s] 86%|████████▌ | 8576/9960 [00:05<00:00, 1623.07it/s] 88%|████████▊ | 8739/9960 [00:05<00:00, 1618.69it/s] 89%|████████▉ | 8906/9960 [00:05<00:00, 1632.14it/s] 91%|█████████ | 9074/9960 [00:05<00:00, 1644.80it/s] 93%|█████████▎| 9239/9960 [00:05<00:00, 1623.68it/s] 95%|█████████▍| 9413/9960 [00:05<00:00, 1656.71it/s] 96%|█████████▌| 9584/9960 [00:05<00:00, 1671.34it/s] 98%|█████████▊| 9752/9960 [00:05<00:00, 1655.86it/s]100%|█████████▉| 9918/9960 [00:05<00:00, 1654.67it/s]100%|██████████| 9960/9960 [00:06<00:00, 1659.32it/s]
Epoch 1/20 Batches:   0%|          | 0/1 [00:00<?, ?it/s]We detected that you are passing `past_key_values` as a tuple and this is deprecated and will be removed in v4.43. Please use an appropriate `Cache` class (https://huggingface.co/docs/transformers/v4.41.3/en/internal/generation_utils#transformers.Cache)
Epoch 1/20 Batches: 100%|██████████| 1/1 [00:01<00:00,  1.49s/it]                                                                 epoch_loss: 0.713432788848877
Epoch [1/20], Loss: 0.7134
Best test AUROC: 0.5756, at epoch: 0
Epoch [1/20],Test AUROC: 0.5756
Epoch 2/20 Batches:   0%|          | 0/1 [00:00<?, ?it/s]Epoch 2/20 Batches: 100%|██████████| 1/1 [00:00<00:00,  1.06it/s]                                                                 epoch_loss: 0.6819757223129272
Epoch [2/20], Loss: 0.6820
Best test AUROC: 0.6653, at epoch: 1
Epoch [2/20],Test AUROC: 0.6653
Epoch 3/20 Batches:   0%|          | 0/1 [00:00<?, ?it/s]Epoch 3/20 Batches: 100%|██████████| 1/1 [00:00<00:00,  1.06it/s]                                                                 epoch_loss: 0.658291220664978
Epoch [3/20], Loss: 0.6583
Best test AUROC: 0.7118, at epoch: 2
Epoch [3/20],Test AUROC: 0.7118
Epoch 4/20 Batches:   0%|          | 0/1 [00:00<?, ?it/s]Epoch 4/20 Batches: 100%|██████████| 1/1 [00:00<00:00,  1.06it/s]                                                                 epoch_loss: 0.6372056007385254
Epoch [4/20], Loss: 0.6372
Best test AUROC: 0.7421, at epoch: 3
Epoch [4/20],Test AUROC: 0.7421
Epoch 5/20 Batches:   0%|          | 0/1 [00:00<?, ?it/s]Epoch 5/20 Batches: 100%|██████████| 1/1 [00:00<00:00,  1.05it/s]                                                                 epoch_loss: 0.6124693155288696
Epoch [5/20], Loss: 0.6125
Best test AUROC: 0.7579, at epoch: 4
Epoch [5/20],Test AUROC: 0.7579
Epoch 6/20 Batches:   0%|          | 0/1 [00:00<?, ?it/s]Epoch 6/20 Batches: 100%|██████████| 1/1 [00:00<00:00,  1.05it/s]                                                                 epoch_loss: 0.586653470993042
Epoch [6/20], Loss: 0.5867
Best test AUROC: 0.7680, at epoch: 5
Epoch [6/20],Test AUROC: 0.7680
Epoch 7/20 Batches:   0%|          | 0/1 [00:00<?, ?it/s]Epoch 7/20 Batches: 100%|██████████| 1/1 [00:00<00:00,  1.05it/s]                                                                 epoch_loss: 0.5622740983963013
Epoch [7/20], Loss: 0.5623
Best test AUROC: 0.7744, at epoch: 6
Epoch [7/20],Test AUROC: 0.7744
Epoch 8/20 Batches:   0%|          | 0/1 [00:00<?, ?it/s]Epoch 8/20 Batches: 100%|██████████| 1/1 [00:00<00:00,  1.05it/s]                                                                 epoch_loss: 0.5344008207321167
Epoch [8/20], Loss: 0.5344
Best test AUROC: 0.7760, at epoch: 7
Epoch [8/20],Test AUROC: 0.7760
Epoch 9/20 Batches:   0%|          | 0/1 [00:00<?, ?it/s]Epoch 9/20 Batches: 100%|██████████| 1/1 [00:00<00:00,  1.05it/s]                                                                 epoch_loss: 0.503799319267273
Epoch [9/20], Loss: 0.5038
Best test AUROC: 0.7778, at epoch: 8
Epoch [9/20],Test AUROC: 0.7778
Epoch 10/20 Batches:   0%|          | 0/1 [00:00<?, ?it/s]Epoch 10/20 Batches: 100%|██████████| 1/1 [00:00<00:00,  1.06it/s]                                                                  epoch_loss: 0.4702223539352417
Epoch [10/20], Loss: 0.4702
Best test AUROC: 0.7808, at epoch: 9
Epoch [10/20],Test AUROC: 0.7808
Epoch 11/20 Batches:   0%|          | 0/1 [00:00<?, ?it/s]Epoch 11/20 Batches: 100%|██████████| 1/1 [00:00<00:00,  1.06it/s]                                                                  epoch_loss: 0.43295514583587646
Epoch [11/20], Loss: 0.4330
Best test AUROC: 0.7810, at epoch: 10
Epoch [11/20],Test AUROC: 0.7810
Epoch 12/20 Batches:   0%|          | 0/1 [00:00<?, ?it/s]Epoch 12/20 Batches: 100%|██████████| 1/1 [00:00<00:00,  1.06it/s]                                                                  epoch_loss: 0.39271581172943115
Epoch [12/20], Loss: 0.3927
Best test AUROC: 0.7815, at epoch: 11
Epoch [12/20],Test AUROC: 0.7815
Epoch 13/20 Batches:   0%|          | 0/1 [00:00<?, ?it/s]Epoch 13/20 Batches: 100%|██████████| 1/1 [00:00<00:00,  1.06it/s]                                                                  epoch_loss: 0.35999369621276855
Epoch [13/20], Loss: 0.3600
Epoch [13/20],Test AUROC: 0.7787
Epoch 14/20 Batches:   0%|          | 0/1 [00:00<?, ?it/s]Epoch 14/20 Batches: 100%|██████████| 1/1 [00:00<00:00,  1.05it/s]                                                                  epoch_loss: 0.34177738428115845
Epoch [14/20], Loss: 0.3418
Epoch [14/20],Test AUROC: 0.7776
Epoch 15/20 Batches:   0%|          | 0/1 [00:00<?, ?it/s]Epoch 15/20 Batches: 100%|██████████| 1/1 [00:00<00:00,  1.06it/s]                                                                  epoch_loss: 0.317831426858902
Epoch [15/20], Loss: 0.3178
Best test AUROC: 0.7817, at epoch: 14
Epoch [15/20],Test AUROC: 0.7817
Epoch 16/20 Batches:   0%|          | 0/1 [00:00<?, ?it/s]Epoch 16/20 Batches: 100%|██████████| 1/1 [00:00<00:00,  1.05it/s]                                                                  epoch_loss: 0.29876774549484253
Epoch [16/20], Loss: 0.2988
Best test AUROC: 0.7849, at epoch: 15
Epoch [16/20],Test AUROC: 0.7849
Epoch 17/20 Batches:   0%|          | 0/1 [00:00<?, ?it/s]Epoch 17/20 Batches: 100%|██████████| 1/1 [00:00<00:00,  1.05it/s]                                                                  epoch_loss: 0.26746129989624023
Epoch [17/20], Loss: 0.2675
Best test AUROC: 0.7865, at epoch: 16
Epoch [17/20],Test AUROC: 0.7865
Epoch 18/20 Batches:   0%|          | 0/1 [00:00<?, ?it/s]Epoch 18/20 Batches: 100%|██████████| 1/1 [00:00<00:00,  1.06it/s]                                                                  epoch_loss: 0.2527918219566345
Epoch [18/20], Loss: 0.2528
Best test AUROC: 0.7890, at epoch: 17
Epoch [18/20],Test AUROC: 0.7890
Epoch 19/20 Batches:   0%|          | 0/1 [00:00<?, ?it/s]Epoch 19/20 Batches: 100%|██████████| 1/1 [00:00<00:00,  1.05it/s]                                                                  epoch_loss: 0.22874140739440918
Epoch [19/20], Loss: 0.2287
Epoch [19/20],Test AUROC: 0.7886
Epoch 20/20 Batches:   0%|          | 0/1 [00:00<?, ?it/s]Epoch 20/20 Batches: 100%|██████████| 1/1 [00:00<00:00,  1.06it/s]                                                                  epoch_loss: 0.21236275136470795
Epoch [20/20], Loss: 0.2124
Best test AUROC: 0.7902, at epoch: 19
Epoch [20/20],Test AUROC: 0.7902
  0%|          | 0/115 [00:00<?, ?it/s]  1%|          | 1/115 [00:00<00:55,  2.07it/s]  2%|▏         | 2/115 [00:01<00:58,  1.95it/s]  3%|▎         | 3/115 [00:01<00:48,  2.30it/s]  3%|▎         | 4/115 [00:01<00:52,  2.11it/s]  4%|▍         | 5/115 [00:02<00:53,  2.06it/s]  5%|▌         | 6/115 [00:02<00:50,  2.18it/s]  6%|▌         | 7/115 [00:03<00:46,  2.34it/s]  7%|▋         | 8/115 [00:03<00:45,  2.34it/s]  8%|▊         | 9/115 [00:04<00:47,  2.21it/s]  9%|▊         | 10/115 [00:04<00:50,  2.10it/s] 10%|▉         | 11/115 [00:04<00:44,  2.32it/s] 10%|█         | 12/115 [00:05<00:48,  2.10it/s] 11%|█▏        | 13/115 [00:06<00:49,  2.08it/s] 12%|█▏        | 14/115 [00:06<00:49,  2.04it/s] 13%|█▎        | 15/115 [00:06<00:44,  2.25it/s] 14%|█▍        | 16/115 [00:07<00:48,  2.04it/s] 15%|█▍        | 17/115 [00:08<00:50,  1.95it/s] 16%|█▌        | 18/115 [00:08<00:51,  1.87it/s] 17%|█▋        | 19/115 [00:08<00:45,  2.10it/s] 17%|█▋        | 20/115 [00:09<00:43,  2.17it/s] 18%|█▊        | 21/115 [00:09<00:45,  2.07it/s] 19%|█▉        | 22/115 [00:10<00:45,  2.04it/s] 20%|██        | 23/115 [00:10<00:40,  2.26it/s] 21%|██        | 24/115 [00:11<00:39,  2.32it/s] 22%|██▏       | 25/115 [00:11<00:36,  2.49it/s] 23%|██▎       | 26/115 [00:11<00:33,  2.62it/s] 23%|██▎       | 27/115 [00:12<00:37,  2.34it/s] 24%|██▍       | 28/115 [00:12<00:40,  2.15it/s] 25%|██▌       | 29/115 [00:13<00:44,  1.92it/s] 26%|██▌       | 30/115 [00:14<00:44,  1.90it/s] 27%|██▋       | 31/115 [00:14<00:40,  2.07it/s] 28%|██▊       | 32/115 [00:14<00:40,  2.05it/s] 29%|██▊       | 33/115 [00:15<00:42,  1.92it/s] 30%|██▉       | 34/115 [00:16<00:40,  1.98it/s] 30%|███       | 35/115 [00:16<00:39,  2.04it/s] 31%|███▏      | 36/115 [00:17<00:40,  1.97it/s] 32%|███▏      | 37/115 [00:17<00:40,  1.91it/s] 33%|███▎      | 38/115 [00:18<00:39,  1.95it/s] 34%|███▍      | 39/115 [00:18<00:36,  2.09it/s] 35%|███▍      | 40/115 [00:18<00:34,  2.16it/s] 36%|███▌      | 41/115 [00:19<00:37,  1.96it/s] 37%|███▋      | 42/115 [00:20<00:36,  1.98it/s] 37%|███▋      | 43/115 [00:20<00:42,  1.71it/s] 38%|███▊      | 44/115 [00:21<00:46,  1.52it/s] 39%|███▉      | 45/115 [00:22<00:43,  1.59it/s] 40%|████      | 46/115 [00:22<00:42,  1.61it/s] 41%|████      | 47/115 [00:23<00:39,  1.71it/s] 42%|████▏     | 48/115 [00:24<00:52,  1.27it/s] 43%|████▎     | 49/115 [00:25<00:49,  1.34it/s] 43%|████▎     | 50/115 [00:25<00:45,  1.44it/s] 44%|████▍     | 51/115 [00:26<00:40,  1.56it/s] 45%|████▌     | 52/115 [00:26<00:40,  1.55it/s] 46%|████▌     | 53/115 [00:27<00:39,  1.57it/s] 47%|████▋     | 54/115 [00:28<00:37,  1.62it/s] 48%|████▊     | 55/115 [00:28<00:31,  1.90it/s] 49%|████▊     | 56/115 [00:28<00:29,  2.01it/s] 50%|████▉     | 57/115 [00:29<00:25,  2.29it/s] 50%|█████     | 58/115 [00:29<00:23,  2.42it/s] 51%|█████▏    | 59/115 [00:29<00:21,  2.63it/s] 52%|█████▏    | 60/115 [00:30<00:23,  2.35it/s] 53%|█████▎    | 61/115 [00:30<00:23,  2.30it/s] 54%|█████▍    | 62/115 [00:31<00:24,  2.15it/s] 55%|█████▍    | 63/115 [00:32<00:26,  1.95it/s] 56%|█████▌    | 64/115 [00:32<00:25,  2.00it/s] 57%|█████▋    | 65/115 [00:32<00:24,  2.07it/s] 57%|█████▋    | 66/115 [00:33<00:24,  1.99it/s] 58%|█████▊    | 67/115 [00:33<00:22,  2.16it/s] 59%|█████▉    | 68/115 [00:34<00:20,  2.26it/s] 60%|██████    | 69/115 [00:34<00:21,  2.18it/s] 61%|██████    | 70/115 [00:35<00:21,  2.11it/s] 62%|██████▏   | 71/115 [00:35<00:20,  2.13it/s] 63%|██████▎   | 72/115 [00:36<00:20,  2.09it/s] 63%|██████▎   | 73/115 [00:36<00:18,  2.25it/s] 64%|██████▍   | 74/115 [00:36<00:17,  2.34it/s] 65%|██████▌   | 75/115 [00:37<00:17,  2.30it/s] 66%|██████▌   | 76/115 [00:37<00:18,  2.13it/s] 67%|██████▋   | 77/115 [00:38<00:18,  2.03it/s] 68%|██████▊   | 78/115 [00:38<00:16,  2.18it/s] 69%|██████▊   | 79/115 [00:39<00:17,  2.08it/s] 70%|██████▉   | 80/115 [00:39<00:15,  2.24it/s] 70%|███████   | 81/115 [00:40<00:14,  2.30it/s] 71%|███████▏  | 82/115 [00:40<00:14,  2.30it/s] 72%|███████▏  | 83/115 [00:41<00:13,  2.38it/s] 73%|███████▎  | 84/115 [00:41<00:13,  2.23it/s] 74%|███████▍  | 85/115 [00:42<00:13,  2.19it/s] 75%|███████▍  | 86/115 [00:42<00:13,  2.07it/s] 76%|███████▌  | 87/115 [00:43<00:15,  1.85it/s] 77%|███████▋  | 88/115 [00:43<00:14,  1.89it/s] 77%|███████▋  | 89/115 [00:44<00:11,  2.17it/s] 78%|███████▊  | 90/115 [00:44<00:11,  2.19it/s] 79%|███████▉  | 91/115 [00:45<00:12,  1.89it/s] 80%|████████  | 92/115 [00:45<00:12,  1.78it/s] 81%|████████  | 93/115 [00:46<00:12,  1.79it/s] 82%|████████▏ | 94/115 [00:46<00:11,  1.89it/s] 83%|████████▎ | 95/115 [00:47<00:10,  1.95it/s] 83%|████████▎ | 96/115 [00:47<00:10,  1.82it/s] 84%|████████▍ | 97/115 [00:48<00:09,  1.89it/s] 85%|████████▌ | 98/115 [00:48<00:08,  2.06it/s] 86%|████████▌ | 99/115 [00:49<00:07,  2.13it/s] 87%|████████▋ | 100/115 [00:49<00:06,  2.29it/s] 88%|████████▊ | 101/115 [00:50<00:06,  2.20it/s] 89%|████████▊ | 102/115 [00:50<00:06,  2.15it/s] 90%|████████▉ | 103/115 [00:50<00:05,  2.35it/s] 90%|█████████ | 104/115 [00:51<00:04,  2.27it/s] 91%|█████████▏| 105/115 [00:51<00:03,  2.58it/s] 92%|█████████▏| 106/115 [00:52<00:03,  2.38it/s] 93%|█████████▎| 107/115 [00:52<00:03,  2.45it/s] 94%|█████████▍| 108/115 [00:52<00:02,  2.64it/s] 95%|█████████▍| 109/115 [00:53<00:02,  2.77it/s] 96%|█████████▌| 110/115 [00:54<00:02,  1.87it/s] 97%|█████████▋| 111/115 [00:54<00:02,  1.65it/s] 97%|█████████▋| 112/115 [00:56<00:02,  1.14it/s] 98%|█████████▊| 113/115 [00:56<00:01,  1.35it/s] 99%|█████████▉| 114/115 [00:57<00:00,  1.53it/s]100%|██████████| 115/115 [00:57<00:00,  2.01it/s]
tsv_main1.py:175: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  exemplar_label = torch.tensor(exemplar_labels).cuda()
tsv_main1.py:182: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  augmented_labels = torch.concat((selected_labels, torch.tensor(exemplar_labels).clone().cuda()))
Epoch 1/20 Batches:   0%|          | 0/3 [00:00<?, ?it/s]/data/zyy/LLM/tsv/train_utils.py:26: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  labels = torch.tensor(labels, dtype=torch.long, device=device)
Epoch 1/20 Batches:  33%|███▎      | 1/3 [00:00<00:01,  1.14it/s]Epoch 1/20 Batches:  67%|██████▋   | 2/3 [00:01<00:00,  1.53it/s]Epoch 1/20 Batches: 100%|██████████| 3/3 [00:02<00:00,  1.27it/s]                                                                 epoch_loss: 0.2519972274700801
Epoch [1/20], Loss: 0.2520
Best test AUROC: 0.8024, at epoch: 20
Epoch 2/20 Batches:   0%|          | 0/3 [00:00<?, ?it/s]/data/zyy/LLM/tsv/train_utils.py:26: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  labels = torch.tensor(labels, dtype=torch.long, device=device)
Epoch 2/20 Batches:  33%|███▎      | 1/3 [00:00<00:01,  1.13it/s]Epoch 2/20 Batches:  67%|██████▋   | 2/3 [00:01<00:00,  1.52it/s]Epoch 2/20 Batches: 100%|██████████| 3/3 [00:02<00:00,  1.27it/s]                                                                 epoch_loss: 0.15643133719762167
Epoch [2/20], Loss: 0.1564
Epoch 3/20 Batches:   0%|          | 0/3 [00:00<?, ?it/s]/data/zyy/LLM/tsv/train_utils.py:26: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  labels = torch.tensor(labels, dtype=torch.long, device=device)
Epoch 3/20 Batches:  33%|███▎      | 1/3 [00:00<00:01,  1.13it/s]Epoch 3/20 Batches:  67%|██████▋   | 2/3 [00:01<00:00,  1.51it/s]Epoch 3/20 Batches: 100%|██████████| 3/3 [00:02<00:00,  1.26it/s]                                                                 epoch_loss: 0.11689322690169017
Epoch [3/20], Loss: 0.1169
Epoch 4/20 Batches:   0%|          | 0/3 [00:00<?, ?it/s]/data/zyy/LLM/tsv/train_utils.py:26: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  labels = torch.tensor(labels, dtype=torch.long, device=device)
Epoch 4/20 Batches:  33%|███▎      | 1/3 [00:00<00:01,  1.13it/s]Epoch 4/20 Batches:  67%|██████▋   | 2/3 [00:01<00:00,  1.51it/s]Epoch 4/20 Batches: 100%|██████████| 3/3 [00:02<00:00,  1.26it/s]                                                                 epoch_loss: 0.08823392788569133
Epoch [4/20], Loss: 0.0882
Best test AUROC: 0.8066, at epoch: 23
Epoch 5/20 Batches:   0%|          | 0/3 [00:00<?, ?it/s]/data/zyy/LLM/tsv/train_utils.py:26: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  labels = torch.tensor(labels, dtype=torch.long, device=device)
Epoch 5/20 Batches:  33%|███▎      | 1/3 [00:00<00:01,  1.13it/s]Epoch 5/20 Batches:  67%|██████▋   | 2/3 [00:01<00:00,  1.52it/s]Epoch 5/20 Batches: 100%|██████████| 3/3 [00:02<00:00,  1.27it/s]                                                                 epoch_loss: 0.08354020491242409
Epoch [5/20], Loss: 0.0835
Epoch 6/20 Batches:   0%|          | 0/3 [00:00<?, ?it/s]/data/zyy/LLM/tsv/train_utils.py:26: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  labels = torch.tensor(labels, dtype=torch.long, device=device)
Epoch 6/20 Batches:  33%|███▎      | 1/3 [00:00<00:01,  1.13it/s]Epoch 6/20 Batches:  67%|██████▋   | 2/3 [00:01<00:00,  1.52it/s]Epoch 6/20 Batches: 100%|██████████| 3/3 [00:02<00:00,  1.26it/s]                                                                 epoch_loss: 0.07112337027986844
Epoch [6/20], Loss: 0.0711
Best test AUROC: 0.8117, at epoch: 25
Epoch 7/20 Batches:   0%|          | 0/3 [00:00<?, ?it/s]/data/zyy/LLM/tsv/train_utils.py:26: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  labels = torch.tensor(labels, dtype=torch.long, device=device)
Epoch 7/20 Batches:  33%|███▎      | 1/3 [00:00<00:01,  1.14it/s]Epoch 7/20 Batches:  67%|██████▋   | 2/3 [00:01<00:00,  1.52it/s]Epoch 7/20 Batches: 100%|██████████| 3/3 [00:02<00:00,  1.27it/s]                                                                 epoch_loss: 0.05971691012382507
Epoch [7/20], Loss: 0.0597
Epoch 8/20 Batches:   0%|          | 0/3 [00:00<?, ?it/s]/data/zyy/LLM/tsv/train_utils.py:26: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  labels = torch.tensor(labels, dtype=torch.long, device=device)
Epoch 8/20 Batches:  33%|███▎      | 1/3 [00:00<00:01,  1.14it/s]Epoch 8/20 Batches:  67%|██████▋   | 2/3 [00:01<00:00,  1.52it/s]Epoch 8/20 Batches: 100%|██████████| 3/3 [00:02<00:00,  1.26it/s]                                                                 epoch_loss: 0.05460128622750441
Epoch [8/20], Loss: 0.0546
Epoch 9/20 Batches:   0%|          | 0/3 [00:00<?, ?it/s]/data/zyy/LLM/tsv/train_utils.py:26: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  labels = torch.tensor(labels, dtype=torch.long, device=device)
Epoch 9/20 Batches:  33%|███▎      | 1/3 [00:00<00:01,  1.14it/s]Epoch 9/20 Batches:  67%|██████▋   | 2/3 [00:01<00:00,  1.52it/s]Epoch 9/20 Batches: 100%|██████████| 3/3 [00:02<00:00,  1.27it/s]                                                                 epoch_loss: 0.039462641502420105
Epoch [9/20], Loss: 0.0395
Epoch 10/20 Batches:   0%|          | 0/3 [00:00<?, ?it/s]/data/zyy/LLM/tsv/train_utils.py:26: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  labels = torch.tensor(labels, dtype=torch.long, device=device)
Epoch 10/20 Batches:  33%|███▎      | 1/3 [00:00<00:01,  1.14it/s]Epoch 10/20 Batches:  67%|██████▋   | 2/3 [00:01<00:00,  1.52it/s]Epoch 10/20 Batches: 100%|██████████| 3/3 [00:02<00:00,  1.26it/s]                                                                  epoch_loss: 0.03212489280849695
Epoch [10/20], Loss: 0.0321
Epoch 11/20 Batches:   0%|          | 0/3 [00:00<?, ?it/s]/data/zyy/LLM/tsv/train_utils.py:26: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  labels = torch.tensor(labels, dtype=torch.long, device=device)
Epoch 11/20 Batches:  33%|███▎      | 1/3 [00:00<00:01,  1.14it/s]Epoch 11/20 Batches:  67%|██████▋   | 2/3 [00:01<00:00,  1.53it/s]Epoch 11/20 Batches: 100%|██████████| 3/3 [00:02<00:00,  1.27it/s]                                                                  epoch_loss: 0.026998125327130158
Epoch [11/20], Loss: 0.0270
Epoch 12/20 Batches:   0%|          | 0/3 [00:00<?, ?it/s]/data/zyy/LLM/tsv/train_utils.py:26: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  labels = torch.tensor(labels, dtype=torch.long, device=device)
Epoch 12/20 Batches:  33%|███▎      | 1/3 [00:00<00:01,  1.14it/s]Epoch 12/20 Batches:  67%|██████▋   | 2/3 [00:01<00:00,  1.52it/s]Epoch 12/20 Batches: 100%|██████████| 3/3 [00:02<00:00,  1.27it/s]                                                                  epoch_loss: 0.02245761640369892
Epoch [12/20], Loss: 0.0225
Epoch 13/20 Batches:   0%|          | 0/3 [00:00<?, ?it/s]/data/zyy/LLM/tsv/train_utils.py:26: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  labels = torch.tensor(labels, dtype=torch.long, device=device)
Epoch 13/20 Batches:  33%|███▎      | 1/3 [00:00<00:01,  1.14it/s]Epoch 13/20 Batches:  67%|██████▋   | 2/3 [00:01<00:00,  1.52it/s]Epoch 13/20 Batches: 100%|██████████| 3/3 [00:02<00:00,  1.27it/s]                                                                  epoch_loss: 0.018267838905255
Epoch [13/20], Loss: 0.0183
Epoch 14/20 Batches:   0%|          | 0/3 [00:00<?, ?it/s]/data/zyy/LLM/tsv/train_utils.py:26: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  labels = torch.tensor(labels, dtype=torch.long, device=device)
Epoch 14/20 Batches:  33%|███▎      | 1/3 [00:00<00:01,  1.14it/s]Epoch 14/20 Batches:  67%|██████▋   | 2/3 [00:01<00:00,  1.52it/s]Epoch 14/20 Batches: 100%|██████████| 3/3 [00:02<00:00,  1.26it/s]                                                                  epoch_loss: 0.014851413356761137
Epoch [14/20], Loss: 0.0149
Epoch 15/20 Batches:   0%|          | 0/3 [00:00<?, ?it/s]/data/zyy/LLM/tsv/train_utils.py:26: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  labels = torch.tensor(labels, dtype=torch.long, device=device)
Epoch 15/20 Batches:  33%|███▎      | 1/3 [00:00<00:01,  1.14it/s]Epoch 15/20 Batches:  67%|██████▋   | 2/3 [00:01<00:00,  1.52it/s]Epoch 15/20 Batches: 100%|██████████| 3/3 [00:02<00:00,  1.27it/s]                                                                  epoch_loss: 0.012061862430224815
Epoch [15/20], Loss: 0.0121
Epoch 16/20 Batches:   0%|          | 0/3 [00:00<?, ?it/s]/data/zyy/LLM/tsv/train_utils.py:26: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  labels = torch.tensor(labels, dtype=torch.long, device=device)
Epoch 16/20 Batches:  33%|███▎      | 1/3 [00:00<00:01,  1.14it/s]Epoch 16/20 Batches:  67%|██████▋   | 2/3 [00:01<00:00,  1.52it/s]Epoch 16/20 Batches: 100%|██████████| 3/3 [00:02<00:00,  1.26it/s]                                                                  epoch_loss: 0.00983709500481685
Epoch [16/20], Loss: 0.0098
Epoch 17/20 Batches:   0%|          | 0/3 [00:00<?, ?it/s]/data/zyy/LLM/tsv/train_utils.py:26: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  labels = torch.tensor(labels, dtype=torch.long, device=device)
Epoch 17/20 Batches:  33%|███▎      | 1/3 [00:00<00:01,  1.14it/s]Epoch 17/20 Batches:  67%|██████▋   | 2/3 [00:01<00:00,  1.52it/s]Epoch 17/20 Batches: 100%|██████████| 3/3 [00:02<00:00,  1.26it/s]                                                                  epoch_loss: 0.008066434335584441
Epoch [17/20], Loss: 0.0081
Epoch 18/20 Batches:   0%|          | 0/3 [00:00<?, ?it/s]/data/zyy/LLM/tsv/train_utils.py:26: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  labels = torch.tensor(labels, dtype=torch.long, device=device)
Epoch 18/20 Batches:  33%|███▎      | 1/3 [00:00<00:01,  1.14it/s]Epoch 18/20 Batches:  67%|██████▋   | 2/3 [00:01<00:00,  1.52it/s]Epoch 18/20 Batches: 100%|██████████| 3/3 [00:02<00:00,  1.27it/s]                                                                  epoch_loss: 0.006630514282733202
Epoch [18/20], Loss: 0.0066
Epoch 19/20 Batches:   0%|          | 0/3 [00:00<?, ?it/s]/data/zyy/LLM/tsv/train_utils.py:26: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  labels = torch.tensor(labels, dtype=torch.long, device=device)
Epoch 19/20 Batches:  33%|███▎      | 1/3 [00:00<00:01,  1.14it/s]Epoch 19/20 Batches:  67%|██████▋   | 2/3 [00:01<00:00,  1.52it/s]Epoch 19/20 Batches: 100%|██████████| 3/3 [00:02<00:00,  1.27it/s]                                                                  epoch_loss: 0.005458386382088065
Epoch [19/20], Loss: 0.0055
Epoch 20/20 Batches:   0%|          | 0/3 [00:00<?, ?it/s]/data/zyy/LLM/tsv/train_utils.py:26: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  labels = torch.tensor(labels, dtype=torch.long, device=device)
Epoch 20/20 Batches:  33%|███▎      | 1/3 [00:00<00:01,  1.14it/s]Epoch 20/20 Batches:  67%|██████▋   | 2/3 [00:01<00:00,  1.52it/s]Epoch 20/20 Batches: 100%|██████████| 3/3 [00:02<00:00,  1.27it/s]                                                                  epoch_loss: 0.004523237662700315
Epoch [20/20], Loss: 0.0045
best_test_auroc: 0.8117130123495652
